[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/array/contants.js",
    "content": "export const ARRAY_PAD_ERROR = \"Unable to pad non-iteratable [subject] parameter.\";\n",
    "static": true,
    "longname": "/opt/app/source/src/array/contants.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "ARRAY_PAD_ERROR",
    "memberof": "src/array/contants.js",
    "static": true,
    "longname": "src/array/contants.js~ARRAY_PAD_ERROR",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/array/contants.js",
    "importStyle": "{ARRAY_PAD_ERROR}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "file",
    "name": "src/array/index.js",
    "content": "export {\n  listPadStart,\n  listPadEnd\n} from \"./service\";\n",
    "static": true,
    "longname": "/opt/app/source/src/array/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 51,
    "kind": "file",
    "name": "src/array/service.js",
    "content": "import {\n  iteratable\n} from \"../native/type\";\n\nimport {\n  TYPE_STRING,\n  TYPE_NUMBER\n} from \"../native/constants\";\n\nimport { IS_FINITE } from \"../native/number\";\n\nimport { MATH_MAX } from \"../native/math\";\n\nimport {\n  ARRAY_SLICE\n} from \"../native/array\";\n\nimport {\n  ARRAY_PAD_ERROR\n} from \"./contants\";\n\n/**\n * @typedef {object} IteratableObject\n * @property {number} length\n */\n\n/**\n * Iteratables are anything that has \"length\" property and\n * contains numerically indexed items.\n *\n * @typedef {(string|Array|IteratableObject)} Iteratable\n */\n\n/**\n * Fixes parameters found in listPadStart and listPadEnd.\n *\n * @param {Iteratable} subject The iteratable to pad.\n * @param {number} pad The total length to pad.\n * @param {Iteratable} padList The items to fill-in.\n * @returns {Array} pad information.\n */\nfunction padInfo(subject, pad, padList) {\n  const typeString = TYPE_STRING;\n  const slice = ARRAY_SLICE;\n  let main = subject;\n  let totalPad = pad;\n  let padItems = padList;\n  if (!iteratable(subject)) {\n    throw new TypeError(ARRAY_PAD_ERROR);\n  }\n  else if (typeof main === typeString) {\n    main = slice.call(main, 0);\n  }\n\n  if (typeof totalPad !== TYPE_NUMBER || !IS_FINITE(totalPad) || totalPad < 0) {\n    totalPad = 0;\n  }\n\n  if (!iteratable(padItems)) {\n    padItems = [];\n  }\n  else if (typeof padItems === typeString) {\n    padItems = slice.call(padItems, 0);\n  }\n\n  return [main, totalPad, padItems];\n}\n\n/**\n * Creates a padded Array with another Iteratable (multiple times, if needed)\n * until the resulting Iteratable reaches the given length.\n * The padding is applied from the start of the Iteratable.\n *\n * @param {Iteratable} subject The iteratable to pad.\n * @param {number} pad The length of the resulting Iteratable once it has been padded.\n * @param {Iteratable} padList The string to pad the current Utf instance with.\n * @returns {Array} Utf instance of the specified length with the pad string applied from the start.\n */\nexport function listPadStart(subject, pad, padList) {\n  const max = MATH_MAX;\n  const info = padInfo(subject, pad, padList);\n  const main = info[0];\n  const total = info[1];\n  const list = info[2];\n  const result = [];\n  const padLength = list.length;\n  const mainLength = main.length;\n  let length = max(\n    0,\n    max(\n      mainLength,\n      padLength,\n      total\n    ) - mainLength\n  );\n  let resultLength = 0;\n  let c = 0;\n\n  for (; length--; c++) {\n    result[resultLength++] = list[c % padLength];\n  }\n\n  result.push.apply(result, main);\n\n  return result;\n}\n\n/**\n * Creates a padded Array with another Iteratable (multiple times, if needed)\n * until the resulting Iteratable reaches the given length.\n * The padding is applied from the end of the Iteratable.\n *\n * @param {Iteratable} subject The iteratable to pad.\n * @param {number} pad The length of the resulting Iteratable once it has been padded.\n * @param {Iteratable} padList The string to pad the current Utf instance with.\n * @returns {Array} Utf instance of the specified length with the pad string applied from the start.\n */\nexport function listPadEnd(subject, pad, padList) {\n  const max = MATH_MAX;\n  const info = padInfo(subject, pad, padList);\n  const main = info[0];\n  const total = info[1];\n  const list = info[2];\n  const result = [];\n  const padLength = list.length;\n  const mainLength = main.length;\n  let length = max(\n    0,\n    max(\n      mainLength,\n      padLength,\n      total\n    ) - mainLength\n  );\n  let c = 0;\n  let resultLength = mainLength;\n\n  result.push.apply(result, main);\n\n  for (; length--; c++) {\n    result[resultLength++] = list[c % padLength];\n  }\n\n  return result;\n}\n",
    "static": true,
    "longname": "/opt/app/source/src/array/service.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 52,
    "kind": "typedef",
    "name": "IteratableObject",
    "memberof": "src/array/service.js",
    "static": true,
    "longname": "src/array/service.js~IteratableObject",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "IteratableObject"
    }
  },
  {
    "__docId__": 53,
    "kind": "typedef",
    "name": "Iteratable",
    "memberof": "src/array/service.js",
    "static": true,
    "longname": "src/array/service.js~Iteratable",
    "access": "public",
    "description": "Iteratables are anything that has \"length\" property and\ncontains numerically indexed items.",
    "type": {
      "types": [
        "string",
        "Array",
        "IteratableObject"
      ],
      "optional": false,
      "name": "Iteratable"
    }
  },
  {
    "__docId__": 54,
    "kind": "function",
    "name": "padInfo",
    "memberof": "src/array/service.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/array/service.js~padInfo",
    "access": "public",
    "export": false,
    "importPath": "@dikotech/basic/src/array/service.js",
    "importStyle": null,
    "description": "Fixes parameters found in listPadStart and listPadEnd.",
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} pad information."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Iteratable"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "The iteratable to pad."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pad",
        "description": "The total length to pad."
      },
      {
        "nullable": null,
        "types": [
          "Iteratable"
        ],
        "spread": false,
        "optional": false,
        "name": "padList",
        "description": "The items to fill-in."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "pad information."
    },
    "ignore": true
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "listPadStart",
    "memberof": "src/array/service.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/array/service.js~listPadStart",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/array/service.js",
    "importStyle": "{listPadStart}",
    "description": "Creates a padded Array with another Iteratable (multiple times, if needed)\nuntil the resulting Iteratable reaches the given length.\nThe padding is applied from the start of the Iteratable.",
    "lineNumber": 79,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} Utf instance of the specified length with the pad string applied from the start."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Iteratable"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "The iteratable to pad."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pad",
        "description": "The length of the resulting Iteratable once it has been padded."
      },
      {
        "nullable": null,
        "types": [
          "Iteratable"
        ],
        "spread": false,
        "optional": false,
        "name": "padList",
        "description": "The string to pad the current Utf instance with."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Utf instance of the specified length with the pad string applied from the start."
    }
  },
  {
    "__docId__": 56,
    "kind": "function",
    "name": "listPadEnd",
    "memberof": "src/array/service.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/array/service.js~listPadEnd",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/array/service.js",
    "importStyle": "{listPadEnd}",
    "description": "Creates a padded Array with another Iteratable (multiple times, if needed)\nuntil the resulting Iteratable reaches the given length.\nThe padding is applied from the end of the Iteratable.",
    "lineNumber": 118,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} Utf instance of the specified length with the pad string applied from the start."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Iteratable"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "The iteratable to pad."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pad",
        "description": "The length of the resulting Iteratable once it has been padded."
      },
      {
        "nullable": null,
        "types": [
          "Iteratable"
        ],
        "spread": false,
        "optional": false,
        "name": "padList",
        "description": "The string to pad the current Utf instance with."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Utf instance of the specified length with the pad string applied from the start."
    }
  },
  {
    "__docId__": 57,
    "kind": "file",
    "name": "src/array/type.js",
    "content": "",
    "static": true,
    "longname": "/opt/app/source/src/array/type.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 58,
    "kind": "file",
    "name": "src/index.js",
    "content": "export {\n  string,\n  number,\n  boolean,\n  numeric,\n  bigint,\n  symbol,\n  scalar,\n  date,\n  regexp,\n  object,\n  array,\n  method,\n  promise,\n  signature\n} from \"./native\";\n\nexport {\n  numberify\n} from \"./number\";\n\nexport {\n  repeat\n} from \"./string\";\n\nexport {\n  Utf,\n\n  eachUnicode,\n  string2unicodes,\n  string2codePoints,\n  codePoint2string,\n\n  unicodify,\n  unicodeCount,\n  codepoints2Utf\n} from \"./unicode\";\n\nexport {\n  destructor\n} from \"./lifecycle\";\n",
    "static": true,
    "longname": "/opt/app/source/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "file",
    "name": "src/json/error-reporting.js",
    "content": "import {\n  EMPTY_STRING\n} from \"../native/constants\";\nimport {\n  MATH_MIN,\n  MATH_MAX\n} from \"../native/math\";\n\nlet LAST_ERRORS = null;\n\nlet SHOW_ERRORS = false;\n\nexport function reset() {\n  LAST_ERRORS = null;\n}\n\nexport function get() {\n  const list = LAST_ERRORS;\n  return list ? null : list.slice(0);\n}\n\nexport function showErrors(show) {\n  SHOW_ERRORS = show !== false;\n}\n\nexport function reportParseError(error, lexeme, subject) {\n  const value = lexeme.value || EMPTY_STRING;\n  const length = value.length;\n  const near = subject.substring(\n    MATH_MAX(0, lexeme.from - length - 5),\n    MATH_MIN(subject.length, lexeme.to + length + 5)\n  );\n  const message = `Parse Error: ${error} (${value}) at line: ${lexeme.line} near: ${near}`;\n  let errors = LAST_ERRORS;\n\n  if (!errors) {\n    LAST_ERRORS = errors = [];\n  }\n\n  errors[errors.length] = message;\n  if (SHOW_ERRORS) {\n    console.error(message);\n  }\n}\n\nexport function reportCompileError(error, lexeme, subject) {\n  const value = lexeme.value || EMPTY_STRING;\n  const length = value.length;\n  const near = subject.substring(\n    MATH_MAX(0, lexeme.from - length - 5),\n    MATH_MIN(subject.length, lexeme.to + length + 5)\n  );\n  const message = `Compile Error: ${error} (${value}) at line: ${lexeme.line} near: ${near}`;\n  let errors = LAST_ERRORS;\n\n  if (!errors) {\n    LAST_ERRORS = errors = [];\n  }\n\n  errors[errors.length] = message;\n  if (SHOW_ERRORS) {\n    console.error(message);\n  }\n}\n",
    "static": true,
    "longname": "/opt/app/source/src/json/error-reporting.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 60,
    "kind": "variable",
    "name": "LAST_ERRORS",
    "memberof": "src/json/error-reporting.js",
    "static": true,
    "longname": "src/json/error-reporting.js~LAST_ERRORS",
    "access": "public",
    "export": false,
    "importPath": "@dikotech/basic/src/json/error-reporting.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 61,
    "kind": "variable",
    "name": "SHOW_ERRORS",
    "memberof": "src/json/error-reporting.js",
    "static": true,
    "longname": "src/json/error-reporting.js~SHOW_ERRORS",
    "access": "public",
    "export": false,
    "importPath": "@dikotech/basic/src/json/error-reporting.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "function",
    "name": "reset",
    "memberof": "src/json/error-reporting.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/json/error-reporting.js~reset",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/json/error-reporting.js",
    "importStyle": "{reset}",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "get",
    "memberof": "src/json/error-reporting.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/json/error-reporting.js~get",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/json/error-reporting.js",
    "importStyle": "{get}",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 64,
    "kind": "function",
    "name": "showErrors",
    "memberof": "src/json/error-reporting.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/json/error-reporting.js~showErrors",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/json/error-reporting.js",
    "importStyle": "{showErrors}",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "show",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 65,
    "kind": "function",
    "name": "reportParseError",
    "memberof": "src/json/error-reporting.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/json/error-reporting.js~reportParseError",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/json/error-reporting.js",
    "importStyle": "{reportParseError}",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "error",
        "types": [
          "*"
        ]
      },
      {
        "name": "lexeme",
        "types": [
          "*"
        ]
      },
      {
        "name": "subject",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 66,
    "kind": "function",
    "name": "reportCompileError",
    "memberof": "src/json/error-reporting.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/json/error-reporting.js~reportCompileError",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/json/error-reporting.js",
    "importStyle": "{reportCompileError}",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "error",
        "types": [
          "*"
        ]
      },
      {
        "name": "lexeme",
        "types": [
          "*"
        ]
      },
      {
        "name": "subject",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 67,
    "kind": "file",
    "name": "src/json/index.js",
    "content": "",
    "static": true,
    "longname": "/opt/app/source/src/json/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 68,
    "kind": "file",
    "name": "src/json/tokenizer.js",
    "content": "import {\n  MATH_MAX\n} from \"../native/math\";\n\nimport {\n  EMPTY_STRING\n} from \"../native/constants\";\n\nimport {\n  TOKENIZER_WILDCARD,\n  LINE_CHARACTER,\n  DOUBLE_QUOTE,\n  ESCAPED_DOUBLE_QUOTE,\n  SINGLE_QUOTE,\n  ESCAPED_SINGLE_QUOTE,\n  QUOTE_ESCAPE_REGEXP\n} from \"./constants\";\n\nimport STATES from \"./tokenizer-states.json\";\n\nfunction replaceQuote(all) {\n  switch (all) {\n  case DOUBLE_QUOTE: return ESCAPED_DOUBLE_QUOTE;\n  case ESCAPED_SINGLE_QUOTE: return SINGLE_QUOTE;\n  }\n  return all;\n}\n\nexport function tokenize(input, startIndex) {\n  const emptyString = EMPTY_STRING;\n  const doubleQuote = DOUBLE_QUOTE;\n  const quoteRegexp = QUOTE_ESCAPE_REGEXP;\n  const wildcard = TOKENIZER_WILDCARD;\n  const reference = STATES;\n  const keywords = reference.keywords;\n  const states = reference.state;\n  const ends = reference.ends;\n  const anchor = MATH_MAX(0, 1 * startIndex || 0);\n  const lineCharacter = LINE_CHARACTER;\n\n  let state = states[reference.startState];\n  let length = input.length;\n  let c = anchor;\n  let nextIndex = c;\n  let token = null;\n  let char = null;\n  let found = null;\n  let line = 0;\n\n  if (anchor === length) {\n    return [\n      reference.endToken,\n      emptyString,\n      nextIndex + 1,\n      line\n    ];\n  }\n  else if (anchor > length) {\n    return null;\n  }\n\n  for (; length--; c++) {\n    char = input.charAt(c);\n\n    found = char in state\n      ? state[char]\n      : wildcard in state\n        ? state[wildcard]\n        : false;\n\n    if (found) {\n      // change state\n      state = states[found];\n\n      if (found in ends) {\n        nextIndex = c + 1;\n        token = ends[found];\n      }\n      continue;\n    }\n\n    break;\n  }\n\n  // postprocess token\n  if (token) {\n    found = input.substring(anchor, nextIndex);\n    line = found.split(lineCharacter).length - 1;\n\n    switch (token) {\n    case \"ident\":\n      if (keywords.indexOf(found) !== -1) {\n        token = found;\n      }\n      break;\n    case \"string\":\n      found = ([\n        doubleQuote,\n        found.substring(1, found.length - 1)\n          .replace(\n            quoteRegexp,\n            replaceQuote\n          ),\n        doubleQuote\n      ]).join(emptyString);\n      break;\n    case \":call(\":\n      found = found.substring(1, found.length - 1);\n      break;\n    }\n\n    return [\n      token,\n      found,\n      nextIndex,\n      line\n    ];\n  }\n\n  return null;\n}\n",
    "static": true,
    "longname": "/opt/app/source/src/json/tokenizer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 69,
    "kind": "function",
    "name": "replaceQuote",
    "memberof": "src/json/tokenizer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/json/tokenizer.js~replaceQuote",
    "access": "public",
    "export": false,
    "importPath": "@dikotech/basic/src/json/tokenizer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 70,
    "kind": "function",
    "name": "tokenize",
    "memberof": "src/json/tokenizer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/json/tokenizer.js~tokenize",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/json/tokenizer.js",
    "importStyle": "{tokenize}",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "input",
        "types": [
          "*"
        ]
      },
      {
        "name": "startIndex",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 71,
    "kind": "file",
    "name": "src/lifecycle/destructor.js",
    "content": "import { method } from \"../native\";\n\nconst DESTRUCTORS = [];\nlet INITIALIZED = false;\nlet DESTROYED = false;\n\n/**\n * @private\n */\nfunction onDestroy() {\n  let list = null;\n\n  if (!DESTROYED) {\n    list = DESTRUCTORS.slice(0);\n    DESTROYED = true;\n\n    for (let c = 0, length = list.length; length--; c++) {\n      try {\n        list[c]();\n      }\n      catch (error) {\n        console.warn(error);\n      }\n    }\n\n    DESTRUCTORS.length = list.length = 0;\n  }\n}\n\n/**\n * @private\n */\nfunction onBrowserDestroy() {\n  window.removeEventListener(\"beforeunload\", onDestroy);\n  window.removeEventListener(\"unload\", onDestroy);\n}\n\n/**\n * @private\n */\nfunction onProcessDestroy() {\n  process.removeListener(\"beforeExit\", onDestroy);\n}\n\n/**\n * @private\n */\nfunction initialize() {\n  const list = DESTRUCTORS;\n\n  if (!INITIALIZED) {\n    INITIALIZED = true;\n\n    if (typeof window !== \"undefined\") {\n      window.addEventListener(\"beforeunload\", onDestroy, false);\n      window.addEventListener(\"unload\", onDestroy, false);\n      list[list.length] = onBrowserDestroy;\n    }\n\n    if (typeof process !== \"undefined\") {\n      process.on(\"beforeExit\", onDestroy);\n      list[list.length] = onProcessDestroy;\n    }\n  }\n}\n\n/**\n * Registers a destructor handler. Very useful for NodeJS and browser.\n *\n * @param {Function} callback Function to call when app shutsdown or browser document is unloaded.\n */\nexport function destructor(callback) {\n  const list = DESTRUCTORS;\n\n  if (method(callback)) {\n    initialize();\n    list[list.length] = callback;\n  }\n}\n",
    "static": true,
    "longname": "/opt/app/source/src/lifecycle/destructor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 72,
    "kind": "variable",
    "name": "DESTRUCTORS",
    "memberof": "src/lifecycle/destructor.js",
    "static": true,
    "longname": "src/lifecycle/destructor.js~DESTRUCTORS",
    "access": "public",
    "export": false,
    "importPath": "@dikotech/basic/src/lifecycle/destructor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 73,
    "kind": "variable",
    "name": "INITIALIZED",
    "memberof": "src/lifecycle/destructor.js",
    "static": true,
    "longname": "src/lifecycle/destructor.js~INITIALIZED",
    "access": "public",
    "export": false,
    "importPath": "@dikotech/basic/src/lifecycle/destructor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 74,
    "kind": "variable",
    "name": "DESTROYED",
    "memberof": "src/lifecycle/destructor.js",
    "static": true,
    "longname": "src/lifecycle/destructor.js~DESTROYED",
    "access": "public",
    "export": false,
    "importPath": "@dikotech/basic/src/lifecycle/destructor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 75,
    "kind": "function",
    "name": "onDestroy",
    "memberof": "src/lifecycle/destructor.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lifecycle/destructor.js~onDestroy",
    "access": "private",
    "export": false,
    "importPath": "@dikotech/basic/src/lifecycle/destructor.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 76,
    "kind": "function",
    "name": "onBrowserDestroy",
    "memberof": "src/lifecycle/destructor.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lifecycle/destructor.js~onBrowserDestroy",
    "access": "private",
    "export": false,
    "importPath": "@dikotech/basic/src/lifecycle/destructor.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 33,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 77,
    "kind": "function",
    "name": "onProcessDestroy",
    "memberof": "src/lifecycle/destructor.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lifecycle/destructor.js~onProcessDestroy",
    "access": "private",
    "export": false,
    "importPath": "@dikotech/basic/src/lifecycle/destructor.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 41,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 78,
    "kind": "function",
    "name": "initialize",
    "memberof": "src/lifecycle/destructor.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lifecycle/destructor.js~initialize",
    "access": "private",
    "export": false,
    "importPath": "@dikotech/basic/src/lifecycle/destructor.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 48,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 79,
    "kind": "function",
    "name": "destructor",
    "memberof": "src/lifecycle/destructor.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lifecycle/destructor.js~destructor",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/lifecycle/destructor.js",
    "importStyle": "{destructor}",
    "description": "Registers a destructor handler. Very useful for NodeJS and browser.",
    "lineNumber": 72,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Function to call when app shutsdown or browser document is unloaded."
      }
    ],
    "return": null
  },
  {
    "__docId__": 80,
    "kind": "file",
    "name": "src/lifecycle/index.js",
    "content": "export {\n  destructor\n} from \"./destructor\";\n",
    "static": true,
    "longname": "/opt/app/source/src/lifecycle/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 81,
    "kind": "file",
    "name": "src/native/array.js",
    "content": "const ArrayPrototype = Array.prototype;\n\nexport const ARRAY_SLICE = ArrayPrototype.slice;\n\nexport const ARRAY_PUSH = ArrayPrototype.push;\n\nexport const ARRAY_SPLICE = ArrayPrototype.splice;\n\nexport const ARRAY_JOIN = ArrayPrototype.join;\n",
    "static": true,
    "longname": "/opt/app/source/src/native/array.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 82,
    "kind": "variable",
    "name": "ArrayPrototype",
    "memberof": "src/native/array.js",
    "static": true,
    "longname": "src/native/array.js~ArrayPrototype",
    "access": "public",
    "export": false,
    "importPath": "@dikotech/basic/src/native/array.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 83,
    "kind": "variable",
    "name": "ARRAY_SLICE",
    "memberof": "src/native/array.js",
    "static": true,
    "longname": "src/native/array.js~ARRAY_SLICE",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/array.js",
    "importStyle": "{ARRAY_SLICE}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 84,
    "kind": "variable",
    "name": "ARRAY_PUSH",
    "memberof": "src/native/array.js",
    "static": true,
    "longname": "src/native/array.js~ARRAY_PUSH",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/array.js",
    "importStyle": "{ARRAY_PUSH}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 85,
    "kind": "variable",
    "name": "ARRAY_SPLICE",
    "memberof": "src/native/array.js",
    "static": true,
    "longname": "src/native/array.js~ARRAY_SPLICE",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/array.js",
    "importStyle": "{ARRAY_SPLICE}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 86,
    "kind": "variable",
    "name": "ARRAY_JOIN",
    "memberof": "src/native/array.js",
    "static": true,
    "longname": "src/native/array.js~ARRAY_JOIN",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/array.js",
    "importStyle": "{ARRAY_JOIN}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 87,
    "kind": "file",
    "name": "src/native/constants.js",
    "content": "export const TYPE_NUMBER = \"number\";\n\nexport const TYPE_BIGINT = \"bigint\";\n\nexport const TYPE_STRING = \"string\";\n\nexport const TYPE_BOOLEAN = \"boolean\";\n\nexport const TYPE_UNDEFINED = \"undefined\";\n\nexport const TYPE_FUNCTION = \"function\";\n\nexport const TYPE_OBJECT = \"object\";\n\nexport const TYPE_SYMBOL = \"symbol\";\n\nexport const BIGINT_SIGNATURE = \"[object BigInt]\";\nexport const SYMBOL_SIGNATURE = \"[object Symbol]\";\nexport const OBJECT_SIGNATURE = \"[object Object]\";\nexport const FUNCTION_SIGNATURE = \"[object Function]\";\nexport const ARRAY_SIGNATURE = \"[object Array]\";\nexport const DATE_SIGNATURE = \"[object Date]\";\nexport const REGEXP_SIGNATURE = \"[object RegExp]\";\nexport const PROMISE_SIGNATURE = \"[object Promise]\";\nexport const UNDEFINED_SIGNATURE = \"[object Undefined]\";\nexport const NULL_SIGNATURE = \"[object Null]\";\n\nexport const NOT_NUMBER = undefined + null;\nexport const EMPTY_STRING = \"\";\nexport const BOOLEAN_TRUE = \"true\";\nexport const BOOLEAN_FALSE = \"false\";\n\n/**\n * @ignore\n */\nexport function EMPTY_FUNCTION() {\n}\n",
    "static": true,
    "longname": "/opt/app/source/src/native/constants.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 88,
    "kind": "variable",
    "name": "TYPE_NUMBER",
    "memberof": "src/native/constants.js",
    "static": true,
    "longname": "src/native/constants.js~TYPE_NUMBER",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/constants.js",
    "importStyle": "{TYPE_NUMBER}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 89,
    "kind": "variable",
    "name": "TYPE_BIGINT",
    "memberof": "src/native/constants.js",
    "static": true,
    "longname": "src/native/constants.js~TYPE_BIGINT",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/constants.js",
    "importStyle": "{TYPE_BIGINT}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 90,
    "kind": "variable",
    "name": "TYPE_STRING",
    "memberof": "src/native/constants.js",
    "static": true,
    "longname": "src/native/constants.js~TYPE_STRING",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/constants.js",
    "importStyle": "{TYPE_STRING}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 91,
    "kind": "variable",
    "name": "TYPE_BOOLEAN",
    "memberof": "src/native/constants.js",
    "static": true,
    "longname": "src/native/constants.js~TYPE_BOOLEAN",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/constants.js",
    "importStyle": "{TYPE_BOOLEAN}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 92,
    "kind": "variable",
    "name": "TYPE_UNDEFINED",
    "memberof": "src/native/constants.js",
    "static": true,
    "longname": "src/native/constants.js~TYPE_UNDEFINED",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/constants.js",
    "importStyle": "{TYPE_UNDEFINED}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 93,
    "kind": "variable",
    "name": "TYPE_FUNCTION",
    "memberof": "src/native/constants.js",
    "static": true,
    "longname": "src/native/constants.js~TYPE_FUNCTION",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/constants.js",
    "importStyle": "{TYPE_FUNCTION}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 94,
    "kind": "variable",
    "name": "TYPE_OBJECT",
    "memberof": "src/native/constants.js",
    "static": true,
    "longname": "src/native/constants.js~TYPE_OBJECT",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/constants.js",
    "importStyle": "{TYPE_OBJECT}",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 95,
    "kind": "variable",
    "name": "TYPE_SYMBOL",
    "memberof": "src/native/constants.js",
    "static": true,
    "longname": "src/native/constants.js~TYPE_SYMBOL",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/constants.js",
    "importStyle": "{TYPE_SYMBOL}",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 96,
    "kind": "variable",
    "name": "BIGINT_SIGNATURE",
    "memberof": "src/native/constants.js",
    "static": true,
    "longname": "src/native/constants.js~BIGINT_SIGNATURE",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/constants.js",
    "importStyle": "{BIGINT_SIGNATURE}",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 97,
    "kind": "variable",
    "name": "SYMBOL_SIGNATURE",
    "memberof": "src/native/constants.js",
    "static": true,
    "longname": "src/native/constants.js~SYMBOL_SIGNATURE",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/constants.js",
    "importStyle": "{SYMBOL_SIGNATURE}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 98,
    "kind": "variable",
    "name": "OBJECT_SIGNATURE",
    "memberof": "src/native/constants.js",
    "static": true,
    "longname": "src/native/constants.js~OBJECT_SIGNATURE",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/constants.js",
    "importStyle": "{OBJECT_SIGNATURE}",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 99,
    "kind": "variable",
    "name": "FUNCTION_SIGNATURE",
    "memberof": "src/native/constants.js",
    "static": true,
    "longname": "src/native/constants.js~FUNCTION_SIGNATURE",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/constants.js",
    "importStyle": "{FUNCTION_SIGNATURE}",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 100,
    "kind": "variable",
    "name": "ARRAY_SIGNATURE",
    "memberof": "src/native/constants.js",
    "static": true,
    "longname": "src/native/constants.js~ARRAY_SIGNATURE",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/constants.js",
    "importStyle": "{ARRAY_SIGNATURE}",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 101,
    "kind": "variable",
    "name": "DATE_SIGNATURE",
    "memberof": "src/native/constants.js",
    "static": true,
    "longname": "src/native/constants.js~DATE_SIGNATURE",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/constants.js",
    "importStyle": "{DATE_SIGNATURE}",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 102,
    "kind": "variable",
    "name": "REGEXP_SIGNATURE",
    "memberof": "src/native/constants.js",
    "static": true,
    "longname": "src/native/constants.js~REGEXP_SIGNATURE",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/constants.js",
    "importStyle": "{REGEXP_SIGNATURE}",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 103,
    "kind": "variable",
    "name": "PROMISE_SIGNATURE",
    "memberof": "src/native/constants.js",
    "static": true,
    "longname": "src/native/constants.js~PROMISE_SIGNATURE",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/constants.js",
    "importStyle": "{PROMISE_SIGNATURE}",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 104,
    "kind": "variable",
    "name": "UNDEFINED_SIGNATURE",
    "memberof": "src/native/constants.js",
    "static": true,
    "longname": "src/native/constants.js~UNDEFINED_SIGNATURE",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/constants.js",
    "importStyle": "{UNDEFINED_SIGNATURE}",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 105,
    "kind": "variable",
    "name": "NULL_SIGNATURE",
    "memberof": "src/native/constants.js",
    "static": true,
    "longname": "src/native/constants.js~NULL_SIGNATURE",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/constants.js",
    "importStyle": "{NULL_SIGNATURE}",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 106,
    "kind": "variable",
    "name": "NOT_NUMBER",
    "memberof": "src/native/constants.js",
    "static": true,
    "longname": "src/native/constants.js~NOT_NUMBER",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/constants.js",
    "importStyle": "{NOT_NUMBER}",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 107,
    "kind": "variable",
    "name": "EMPTY_STRING",
    "memberof": "src/native/constants.js",
    "static": true,
    "longname": "src/native/constants.js~EMPTY_STRING",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/constants.js",
    "importStyle": "{EMPTY_STRING}",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 108,
    "kind": "variable",
    "name": "BOOLEAN_TRUE",
    "memberof": "src/native/constants.js",
    "static": true,
    "longname": "src/native/constants.js~BOOLEAN_TRUE",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/constants.js",
    "importStyle": "{BOOLEAN_TRUE}",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 109,
    "kind": "variable",
    "name": "BOOLEAN_FALSE",
    "memberof": "src/native/constants.js",
    "static": true,
    "longname": "src/native/constants.js~BOOLEAN_FALSE",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/constants.js",
    "importStyle": "{BOOLEAN_FALSE}",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 110,
    "kind": "function",
    "name": "EMPTY_FUNCTION",
    "memberof": "src/native/constants.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/native/constants.js~EMPTY_FUNCTION",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/constants.js",
    "importStyle": "{EMPTY_FUNCTION}",
    "description": "",
    "lineNumber": 36,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 111,
    "kind": "file",
    "name": "src/native/function.js",
    "content": "export const FUNCTION = Function;\n",
    "static": true,
    "longname": "/opt/app/source/src/native/function.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 112,
    "kind": "variable",
    "name": "FUNCTION",
    "memberof": "src/native/function.js",
    "static": true,
    "longname": "src/native/function.js~FUNCTION",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/function.js",
    "importStyle": "{FUNCTION}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 113,
    "kind": "file",
    "name": "src/native/index.js",
    "content": "export {\n  TYPE_BIGINT,\n  TYPE_NUMBER,\n  TYPE_STRING,\n  TYPE_BOOLEAN,\n  TYPE_UNDEFINED,\n  TYPE_SYMBOL,\n  TYPE_FUNCTION,\n  TYPE_OBJECT,\n\n  OBJECT_SIGNATURE,\n  FUNCTION_SIGNATURE,\n  ARRAY_SIGNATURE,\n  DATE_SIGNATURE,\n  REGEXP_SIGNATURE,\n  PROMISE_SIGNATURE,\n  UNDEFINED_SIGNATURE,\n  NULL_SIGNATURE,\n\n  NOT_NUMBER,\n  EMPTY_STRING,\n  BOOLEAN_TRUE,\n  BOOLEAN_FALSE,\n  EMPTY_FUNCTION\n} from \"./constants\";\n\nexport {\n  string,\n  number,\n  boolean,\n  numeric,\n  bigint,\n  symbol,\n  scalar,\n  date,\n  regexp,\n  object,\n  array,\n  method,\n  promise,\n  signature\n} from \"./type\";\n\nexport {\n  MATH_MIN,\n  MATH_MAX\n} from \"./math\";\n\nexport {\n  STRING_FROM_CHARCODE\n} from \"./string\";\n\nexport {\n  OBJECT_DEFINE_PROPERTY,\n  OBJECT_TO_STRING\n} from \"./object\";\n\nexport {\n  ARRAY_JOIN,\n  ARRAY_PUSH,\n  ARRAY_SLICE,\n  ARRAY_SPLICE\n} from \"./array\";\n",
    "static": true,
    "longname": "/opt/app/source/src/native/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 114,
    "kind": "file",
    "name": "src/native/math.js",
    "content": "export const MATH = Math;\n\nexport const MATH_MIN = MATH.min;\nexport const MATH_MAX = MATH.max;\n\nexport const MATH_RANDOM = MATH.random;\nexport const MATH_ROUND = MATH.round;\nexport const MATH_FLOOR = MATH.floor;\nexport const MATH_CEIL = MATH.ceil;\n",
    "static": true,
    "longname": "/opt/app/source/src/native/math.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 115,
    "kind": "variable",
    "name": "MATH",
    "memberof": "src/native/math.js",
    "static": true,
    "longname": "src/native/math.js~MATH",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/math.js",
    "importStyle": "{MATH}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 116,
    "kind": "variable",
    "name": "MATH_MIN",
    "memberof": "src/native/math.js",
    "static": true,
    "longname": "src/native/math.js~MATH_MIN",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/math.js",
    "importStyle": "{MATH_MIN}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 117,
    "kind": "variable",
    "name": "MATH_MAX",
    "memberof": "src/native/math.js",
    "static": true,
    "longname": "src/native/math.js~MATH_MAX",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/math.js",
    "importStyle": "{MATH_MAX}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 118,
    "kind": "variable",
    "name": "MATH_RANDOM",
    "memberof": "src/native/math.js",
    "static": true,
    "longname": "src/native/math.js~MATH_RANDOM",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/math.js",
    "importStyle": "{MATH_RANDOM}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 119,
    "kind": "variable",
    "name": "MATH_ROUND",
    "memberof": "src/native/math.js",
    "static": true,
    "longname": "src/native/math.js~MATH_ROUND",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/math.js",
    "importStyle": "{MATH_ROUND}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 120,
    "kind": "variable",
    "name": "MATH_FLOOR",
    "memberof": "src/native/math.js",
    "static": true,
    "longname": "src/native/math.js~MATH_FLOOR",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/math.js",
    "importStyle": "{MATH_FLOOR}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 121,
    "kind": "variable",
    "name": "MATH_CEIL",
    "memberof": "src/native/math.js",
    "static": true,
    "longname": "src/native/math.js~MATH_CEIL",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/math.js",
    "importStyle": "{MATH_CEIL}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 122,
    "kind": "file",
    "name": "src/native/number.js",
    "content": "\nexport const IS_FINITE = isFinite;\n",
    "static": true,
    "longname": "/opt/app/source/src/native/number.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 123,
    "kind": "variable",
    "name": "IS_FINITE",
    "memberof": "src/native/number.js",
    "static": true,
    "longname": "src/native/number.js~IS_FINITE",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/number.js",
    "importStyle": "{IS_FINITE}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 124,
    "kind": "file",
    "name": "src/native/object.js",
    "content": "const OBJECT = Object;\n\nconst ObjectPrototype = OBJECT.prototype;\n\nexport const OBJECT_DEFINE_PROPERTY = OBJECT.defineProperty;\n\nexport const OBJECT_TO_STRING = ObjectPrototype.toString;\n\nexport const OBJECT_HAS_OWN = ObjectPrototype.hasOwnProperty;\n\nexport const OBJECT_KEYS = OBJECT.keys;\n",
    "static": true,
    "longname": "/opt/app/source/src/native/object.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 125,
    "kind": "variable",
    "name": "OBJECT",
    "memberof": "src/native/object.js",
    "static": true,
    "longname": "src/native/object.js~OBJECT",
    "access": "public",
    "export": false,
    "importPath": "@dikotech/basic/src/native/object.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 126,
    "kind": "variable",
    "name": "ObjectPrototype",
    "memberof": "src/native/object.js",
    "static": true,
    "longname": "src/native/object.js~ObjectPrototype",
    "access": "public",
    "export": false,
    "importPath": "@dikotech/basic/src/native/object.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 127,
    "kind": "variable",
    "name": "OBJECT_DEFINE_PROPERTY",
    "memberof": "src/native/object.js",
    "static": true,
    "longname": "src/native/object.js~OBJECT_DEFINE_PROPERTY",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/object.js",
    "importStyle": "{OBJECT_DEFINE_PROPERTY}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 128,
    "kind": "variable",
    "name": "OBJECT_TO_STRING",
    "memberof": "src/native/object.js",
    "static": true,
    "longname": "src/native/object.js~OBJECT_TO_STRING",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/object.js",
    "importStyle": "{OBJECT_TO_STRING}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 129,
    "kind": "variable",
    "name": "OBJECT_HAS_OWN",
    "memberof": "src/native/object.js",
    "static": true,
    "longname": "src/native/object.js~OBJECT_HAS_OWN",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/object.js",
    "importStyle": "{OBJECT_HAS_OWN}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 130,
    "kind": "variable",
    "name": "OBJECT_KEYS",
    "memberof": "src/native/object.js",
    "static": true,
    "longname": "src/native/object.js~OBJECT_KEYS",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/object.js",
    "importStyle": "{OBJECT_KEYS}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 131,
    "kind": "file",
    "name": "src/native/regexp.js",
    "content": "export const REGEXP = RegExp;\n",
    "static": true,
    "longname": "/opt/app/source/src/native/regexp.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 132,
    "kind": "variable",
    "name": "REGEXP",
    "memberof": "src/native/regexp.js",
    "static": true,
    "longname": "src/native/regexp.js~REGEXP",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/regexp.js",
    "importStyle": "{REGEXP}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 133,
    "kind": "file",
    "name": "src/native/string.js",
    "content": "export const STRING = String;\n\n/**\n * Localized native String.fromCharCode(num1, [...numN]).\n * For more info, check out\n * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode MDN}\n * documentation\n *\n * @function\n * @constant\n * @ignore\n * @param {number} num1 utf-8 character code\n * @param {...number} [numN] utf-8 character code\n * @returns {string}\n */\nexport const STRING_FROM_CHARCODE = STRING.fromCharCode;\n",
    "static": true,
    "longname": "/opt/app/source/src/native/string.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 134,
    "kind": "variable",
    "name": "STRING",
    "memberof": "src/native/string.js",
    "static": true,
    "longname": "src/native/string.js~STRING",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/string.js",
    "importStyle": "{STRING}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 135,
    "kind": "variable",
    "name": "STRING_FROM_CHARCODE",
    "memberof": "src/native/string.js",
    "static": true,
    "longname": "src/native/string.js~STRING_FROM_CHARCODE",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/string.js",
    "importStyle": "{STRING_FROM_CHARCODE}",
    "description": "Localized native String.fromCharCode(num1, [...numN]).\nFor more info, check out\n{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode MDN}\ndocumentation",
    "lineNumber": 16,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@constant",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num1",
        "description": "utf-8 character code"
      },
      {
        "nullable": null,
        "types": [
          "...number"
        ],
        "spread": true,
        "optional": true,
        "name": "numN",
        "description": "utf-8 character code"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "file",
    "name": "src/native/type.js",
    "content": "import {\n  TYPE_NUMBER,\n  TYPE_STRING,\n  TYPE_BOOLEAN,\n  TYPE_UNDEFINED,\n  TYPE_BIGINT,\n  TYPE_SYMBOL,\n\n  OBJECT_SIGNATURE,\n  FUNCTION_SIGNATURE,\n  ARRAY_SIGNATURE,\n  DATE_SIGNATURE,\n  REGEXP_SIGNATURE,\n  PROMISE_SIGNATURE,\n  UNDEFINED_SIGNATURE,\n  NULL_SIGNATURE,\n  TYPE_OBJECT\n} from \"./constants\";\n\nimport { IS_FINITE } from \"./number\";\n\nimport { OBJECT_TO_STRING } from \"./object\";\n\n/**\n * Returns true. if \"subject\" parameter is String.\n *\n * @param {*} subject value to test\n * @returns {boolean} result\n */\nexport function string(subject) {\n  return typeof subject === TYPE_STRING;\n}\n\n/**\n * Returns true. if \"subject\" parameter is Number.\n *\n * @param {*} subject value to test\n * @returns {boolean} result\n */\nexport function number(subject) {\n  return typeof subject === TYPE_NUMBER && IS_FINITE(subject);\n}\n\n/**\n * Returns true. if \"subject\" parameter is BigInt.\n *\n * @param {*} subject value to test\n * @returns {boolean} result\n */\nexport function bigint(subject) {\n  return typeof subject === TYPE_BIGINT;\n}\n\n/**\n * Returns true. if \"subject\" parameter is Boolean.\n *\n * @param {*} subject value to test\n * @returns {boolean} result\n */\nexport function boolean(subject) {\n  return typeof subject === TYPE_BOOLEAN;\n}\n\n/**\n * Returns true. if \"subject\" parameter is Symbol.\n *\n * @param {*} subject value to test\n * @returns {boolean} result\n */\nexport function symbol(subject) {\n  return typeof subject === TYPE_SYMBOL;\n}\n\n/**\n * Returns true. if \"subject\" parameter is Numeric string, number, or bigint.\n *\n * @param {*} subject value to test\n * @returns {boolean} result\n */\nexport function numeric(subject) {\n  let result = subject;\n\n  switch (typeof result) {\n  case TYPE_STRING:\n    result = parseInt(result, 10);\n\n  // falls through\n  case TYPE_NUMBER:\n    return IS_FINITE(result);\n\n  case TYPE_BIGINT: return true;\n  }\n\n  return false;\n}\n\n/**\n * Returns true. if \"subject\" parameter is Scalar string, number, boolean, symbol, or bigint.\n *\n * @param {*} subject value to test\n * @returns {boolean} result\n */\nexport function scalar(subject) {\n  switch (typeof subject) {\n  case TYPE_BIGINT:\n  case TYPE_SYMBOL:\n  case TYPE_STRING:\n  case TYPE_BOOLEAN: return true;\n\n  case TYPE_NUMBER: return IS_FINITE(subject);\n  }\n\n  return false;\n}\n\n/**\n * Returns true. if \"subject\" parameter is an instance of Date.\n *\n * @param {*} subject value to test\n * @returns {boolean} result\n */\nexport function date(subject) {\n  return OBJECT_TO_STRING.call(subject) === DATE_SIGNATURE;\n}\n\n/**\n * Returns true. if \"subject\" parameter is an instance of RegExp.\n *\n * @param {*} subject value to test\n * @returns {boolean} result\n */\nexport function regexp(subject) {\n  return OBJECT_TO_STRING.call(subject) === REGEXP_SIGNATURE;\n}\n\n/**\n * Returns true. if \"subject\" parameter is an instance of User defined Object.\n *\n * @param {*} subject value to test\n * @returns {boolean} result\n */\nexport function object(subject) {\n  return subject !== null && OBJECT_TO_STRING.call(subject) === OBJECT_SIGNATURE;\n}\n\n/**\n * Returns true. if \"subject\" parameter is a Function.\n *\n * @param {*} subject value to test\n * @returns {boolean} result\n */\nexport function method(subject) {\n  return OBJECT_TO_STRING.call(subject) === FUNCTION_SIGNATURE;\n}\n\n/**\n * Returns true. if \"subject\" parameter is an Array.\n *\n * @param {*} subject value to test\n * @returns {boolean} result\n */\nexport function array(subject) {\n  return OBJECT_TO_STRING.call(subject) === ARRAY_SIGNATURE;\n}\n\n/**\n * Returns true. if \"subject\" parameter is a thenable Object or Promise.\n *\n * @param {*} subject value to test\n * @returns {boolean} result\n */\nexport function promise(subject) {\n  switch (OBJECT_TO_STRING.call(subject)) {\n  case OBJECT_SIGNATURE: return subject !== null && method(subject.then);\n\n  case PROMISE_SIGNATURE: return true;\n  }\n\n  return false;\n}\n\n/**\n * Returns true if [subject] is an object with zero-based index properties and length.\n *\n * @param {*} subject value to test.\n * @returns {boolean} result\n */\nexport function iteratable(subject) {\n  switch (typeof subject) {\n  case TYPE_STRING: return true;\n  case TYPE_OBJECT:\n    return subject !== null && IS_FINITE(subject.length);\n  }\n\n  return false;\n}\n\n/**\n * Returns Object signature of \"subject\" parameter.\n * The Object signature in `[object ${ObjectName}]` syntax.\n * The value is extracted by using the value from Object.prototype.toString.call(subject) call.\n *\n * @param {*} subject value to test\n * @returns {string} resolved Object signature `[object ${ObjectName}]`\n */\nexport function signature(subject) {\n  if (typeof subject === TYPE_UNDEFINED) {\n    return UNDEFINED_SIGNATURE;\n  }\n\n  if (subject === null) {\n    return NULL_SIGNATURE;\n  }\n\n  if (subject && method(subject.then)) {\n    return PROMISE_SIGNATURE;\n  }\n\n  return OBJECT_TO_STRING.call(subject);\n}\n",
    "static": true,
    "longname": "/opt/app/source/src/native/type.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 137,
    "kind": "function",
    "name": "string",
    "memberof": "src/native/type.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/native/type.js~string",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/type.js",
    "importStyle": "{string}",
    "description": "Returns true. if \"subject\" parameter is String.",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} result"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "result"
    }
  },
  {
    "__docId__": 138,
    "kind": "function",
    "name": "number",
    "memberof": "src/native/type.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/native/type.js~number",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/type.js",
    "importStyle": "{number}",
    "description": "Returns true. if \"subject\" parameter is Number.",
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} result"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "result"
    }
  },
  {
    "__docId__": 139,
    "kind": "function",
    "name": "bigint",
    "memberof": "src/native/type.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/native/type.js~bigint",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/type.js",
    "importStyle": "{bigint}",
    "description": "Returns true. if \"subject\" parameter is BigInt.",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} result"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "result"
    }
  },
  {
    "__docId__": 140,
    "kind": "function",
    "name": "boolean",
    "memberof": "src/native/type.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/native/type.js~boolean",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/type.js",
    "importStyle": "{boolean}",
    "description": "Returns true. if \"subject\" parameter is Boolean.",
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} result"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "result"
    }
  },
  {
    "__docId__": 141,
    "kind": "function",
    "name": "symbol",
    "memberof": "src/native/type.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/native/type.js~symbol",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/type.js",
    "importStyle": "{symbol}",
    "description": "Returns true. if \"subject\" parameter is Symbol.",
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} result"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "result"
    }
  },
  {
    "__docId__": 142,
    "kind": "function",
    "name": "numeric",
    "memberof": "src/native/type.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/native/type.js~numeric",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/type.js",
    "importStyle": "{numeric}",
    "description": "Returns true. if \"subject\" parameter is Numeric string, number, or bigint.",
    "lineNumber": 80,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} result"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "result"
    }
  },
  {
    "__docId__": 143,
    "kind": "function",
    "name": "scalar",
    "memberof": "src/native/type.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/native/type.js~scalar",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/type.js",
    "importStyle": "{scalar}",
    "description": "Returns true. if \"subject\" parameter is Scalar string, number, boolean, symbol, or bigint.",
    "lineNumber": 103,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} result"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "result"
    }
  },
  {
    "__docId__": 144,
    "kind": "function",
    "name": "date",
    "memberof": "src/native/type.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/native/type.js~date",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/type.js",
    "importStyle": "{date}",
    "description": "Returns true. if \"subject\" parameter is an instance of Date.",
    "lineNumber": 122,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} result"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "result"
    }
  },
  {
    "__docId__": 145,
    "kind": "function",
    "name": "regexp",
    "memberof": "src/native/type.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/native/type.js~regexp",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/type.js",
    "importStyle": "{regexp}",
    "description": "Returns true. if \"subject\" parameter is an instance of RegExp.",
    "lineNumber": 132,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} result"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "result"
    }
  },
  {
    "__docId__": 146,
    "kind": "function",
    "name": "object",
    "memberof": "src/native/type.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/native/type.js~object",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/type.js",
    "importStyle": "{object}",
    "description": "Returns true. if \"subject\" parameter is an instance of User defined Object.",
    "lineNumber": 142,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} result"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "result"
    }
  },
  {
    "__docId__": 147,
    "kind": "function",
    "name": "method",
    "memberof": "src/native/type.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/native/type.js~method",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/type.js",
    "importStyle": "{method}",
    "description": "Returns true. if \"subject\" parameter is a Function.",
    "lineNumber": 152,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} result"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "result"
    }
  },
  {
    "__docId__": 148,
    "kind": "function",
    "name": "array",
    "memberof": "src/native/type.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/native/type.js~array",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/type.js",
    "importStyle": "{array}",
    "description": "Returns true. if \"subject\" parameter is an Array.",
    "lineNumber": 162,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} result"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "result"
    }
  },
  {
    "__docId__": 149,
    "kind": "function",
    "name": "promise",
    "memberof": "src/native/type.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/native/type.js~promise",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/type.js",
    "importStyle": "{promise}",
    "description": "Returns true. if \"subject\" parameter is a thenable Object or Promise.",
    "lineNumber": 172,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} result"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "result"
    }
  },
  {
    "__docId__": 150,
    "kind": "function",
    "name": "iteratable",
    "memberof": "src/native/type.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/native/type.js~iteratable",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/type.js",
    "importStyle": "{iteratable}",
    "description": "Returns true if [subject] is an object with zero-based index properties and length.",
    "lineNumber": 188,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} result"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "value to test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "result"
    }
  },
  {
    "__docId__": 151,
    "kind": "function",
    "name": "signature",
    "memberof": "src/native/type.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/native/type.js~signature",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/native/type.js",
    "importStyle": "{signature}",
    "description": "Returns Object signature of \"subject\" parameter.\nThe Object signature in `[object ${ObjectName}]` syntax.\nThe value is extracted by using the value from Object.prototype.toString.call(subject) call.",
    "lineNumber": 206,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} resolved Object signature `[object ${ObjectName}]`"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "resolved Object signature `[object ${ObjectName}]`"
    }
  },
  {
    "__docId__": 152,
    "kind": "file",
    "name": "src/number/format.js",
    "content": "import {\n  TYPE_STRING,\n  TYPE_NUMBER,\n  TYPE_BOOLEAN\n} from \"../native\";\n\n/**\n * Convert any type \"subject\" parameter to number.\n *\n * @param {*} subject data to convert to number.\n * @param {*} [defaultValue=0] default return value.\n * @returns {number|*} Uses defaultValue if not converted to number.\n */\nexport function numberify(subject, defaultValue = 0) {\n  let value = subject;\n\n  switch (typeof value) {\n  case TYPE_STRING:\n    value = 1 * value;\n\n  // falls through\n  case TYPE_NUMBER: return isFinite(value) ? value : defaultValue;\n\n  case TYPE_BOOLEAN: return value ? 1 : 0;\n  }\n\n  return defaultValue;\n}\n",
    "static": true,
    "longname": "/opt/app/source/src/number/format.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 153,
    "kind": "function",
    "name": "numberify",
    "memberof": "src/number/format.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/number/format.js~numberify",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/number/format.js",
    "importStyle": "{numberify}",
    "description": "Convert any type \"subject\" parameter to number.",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number|*} Uses defaultValue if not converted to number."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "data to convert to number."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "defaultValue",
        "description": "default return value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number",
        "*"
      ],
      "spread": false,
      "description": "Uses defaultValue if not converted to number."
    }
  },
  {
    "__docId__": 154,
    "kind": "file",
    "name": "src/number/index.js",
    "content": "export {\n  numberify\n} from \"./format\";\n",
    "static": true,
    "longname": "/opt/app/source/src/number/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 155,
    "kind": "file",
    "name": "src/object/constants.js",
    "content": "\nexport const EACH_ERROR_INVALID_SUBJECT = \"Unable to each() iterate non-object [subject] parameter.\";\n\nexport const EACH_ERROR_INVALID_CALLBACK = \"Unable to each() iterate object with invalid [callback] parameter.\";\n\nexport const ASSIGN_ERROR_INVALID_SUBJECT = \"Unable to assign() properties to non-object [subject] parameter.\";\n\nexport const ASSIGN_ERROR_INVALID_SOURCE = \"Unable to assign() properties from non-object [source] parameter.\";\n\nexport const TOKENIZER_START_STATE = \"initial\";\n\nexport const TOKENIZER_WILDCARD = \":*\";\n",
    "static": true,
    "longname": "/opt/app/source/src/object/constants.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 156,
    "kind": "variable",
    "name": "EACH_ERROR_INVALID_SUBJECT",
    "memberof": "src/object/constants.js",
    "static": true,
    "longname": "src/object/constants.js~EACH_ERROR_INVALID_SUBJECT",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/object/constants.js",
    "importStyle": "{EACH_ERROR_INVALID_SUBJECT}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 157,
    "kind": "variable",
    "name": "EACH_ERROR_INVALID_CALLBACK",
    "memberof": "src/object/constants.js",
    "static": true,
    "longname": "src/object/constants.js~EACH_ERROR_INVALID_CALLBACK",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/object/constants.js",
    "importStyle": "{EACH_ERROR_INVALID_CALLBACK}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 158,
    "kind": "variable",
    "name": "ASSIGN_ERROR_INVALID_SUBJECT",
    "memberof": "src/object/constants.js",
    "static": true,
    "longname": "src/object/constants.js~ASSIGN_ERROR_INVALID_SUBJECT",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/object/constants.js",
    "importStyle": "{ASSIGN_ERROR_INVALID_SUBJECT}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 159,
    "kind": "variable",
    "name": "ASSIGN_ERROR_INVALID_SOURCE",
    "memberof": "src/object/constants.js",
    "static": true,
    "longname": "src/object/constants.js~ASSIGN_ERROR_INVALID_SOURCE",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/object/constants.js",
    "importStyle": "{ASSIGN_ERROR_INVALID_SOURCE}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 160,
    "kind": "variable",
    "name": "TOKENIZER_START_STATE",
    "memberof": "src/object/constants.js",
    "static": true,
    "longname": "src/object/constants.js~TOKENIZER_START_STATE",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/object/constants.js",
    "importStyle": "{TOKENIZER_START_STATE}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 161,
    "kind": "variable",
    "name": "TOKENIZER_WILDCARD",
    "memberof": "src/object/constants.js",
    "static": true,
    "longname": "src/object/constants.js~TOKENIZER_WILDCARD",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/object/constants.js",
    "importStyle": "{TOKENIZER_WILDCARD}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 162,
    "kind": "file",
    "name": "src/object/index.js",
    "content": "/**\n * Object Module\n *\n * @module object\n */\n\nexport {\n  each,\n  assign\n} from \"./properties\";\n\nexport {\n  contains\n} from \"./validate\";\n",
    "static": true,
    "longname": "/opt/app/source/src/object/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 163,
    "kind": "file",
    "name": "src/object/properties.js",
    "content": "import { method } from \"../native/type\";\n\nimport {\n  OBJECT_SIGNATURE,\n  ARRAY_SIGNATURE,\n  TYPE_NUMBER\n} from \"../native/constants\";\n\nimport {\n  OBJECT_KEYS,\n  OBJECT_TO_STRING\n} from \"../native/object\";\n\nimport {\n  EACH_ERROR_INVALID_CALLBACK,\n  EACH_ERROR_INVALID_SUBJECT,\n  ASSIGN_ERROR_INVALID_SOURCE,\n  ASSIGN_ERROR_INVALID_SUBJECT\n} from \"./constants\";\n\n/**\n * Used for each(subject, callback) callback parameter.\n *\n * @callback eachObjectPropertyCallback\n * @param {*} item value of item with given object key or iteratable index\n * @param {string|number} index key of object or index of iteratable\n * @returns {boolean|undefined} optionally, return false to stop iteration.\n */\n\n/**\n * Iterates object properties or iteratable items calling [callback].\n *\n * @param {object|Array} subject object or iteratable to iterate.\n * @param {eachObjectPropertyCallback} callback function to call on each iteration.\n * @returns {number|string} last iteratable index or property name iterated.\n */\nexport function each(subject, callback) {\n  let c = 0;\n  let length = 0;\n  let key = null;\n  let properties = null;\n\n  if (!method(callback)) {\n    throw new Error(EACH_ERROR_INVALID_CALLBACK);\n  }\n\n  switch (OBJECT_TO_STRING.call(subject)) {\n  case OBJECT_SIGNATURE:\n    length = subject.length;\n    // iterate object\n    if (typeof length !== TYPE_NUMBER || length < 0 || !isFinite(length)) {\n      properties = OBJECT_KEYS(subject);\n\n      for (; length--; c++) {\n        key = properties[c];\n        if (callback(subject[key], key) === false) {\n          return key;\n        }\n      }\n    }\n    // at this point object is iteratable\n\n  // falls through\n  case ARRAY_SIGNATURE:\n    length = subject.length;\n    for (; length--; c++) {\n      if (callback(subject[c], c) === false) {\n        return c;\n      }\n    }\n\n    break;\n\n  default:\n    throw new Error(EACH_ERROR_INVALID_SUBJECT);\n  }\n}\n\n/**\n * Assign own properties of [source] to [subject].\n *\n * @param {object} subject target object to populate with [source] properties.\n * @param {object} source source of properties to populate [subject].\n * @returns {object} the [subject] parameter.\n */\nexport function assign(subject, source) {\n  const toSignature = OBJECT_TO_STRING;\n  const objectSignature = OBJECT_SIGNATURE;\n  let properties = null;\n  let c = 0;\n  let length = 0;\n  let key = null;\n\n  if (toSignature.call(subject) !== objectSignature) {\n    throw new Error(ASSIGN_ERROR_INVALID_SUBJECT);\n  }\n\n  if (toSignature.call(source) !== objectSignature) {\n    throw new Error(ASSIGN_ERROR_INVALID_SOURCE);\n  }\n\n  properties = OBJECT_KEYS(source);\n  length = properties.length;\n\n  for (; length--; c++) {\n    key = properties[c];\n    subject[key] = source[key];\n  }\n\n  return subject;\n}\n",
    "static": true,
    "longname": "/opt/app/source/src/object/properties.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 164,
    "kind": "function",
    "name": "each",
    "memberof": "src/object/properties.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/object/properties.js~each",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/object/properties.js",
    "importStyle": "{each}",
    "description": "Iterates object properties or iteratable items calling [callback].",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number|string} last iteratable index or property name iterated."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "object or iteratable to iterate."
      },
      {
        "nullable": null,
        "types": [
          "eachObjectPropertyCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "function to call on each iteration."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number",
        "string"
      ],
      "spread": false,
      "description": "last iteratable index or property name iterated."
    }
  },
  {
    "__docId__": 165,
    "kind": "function",
    "name": "assign",
    "memberof": "src/object/properties.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/object/properties.js~assign",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/object/properties.js",
    "importStyle": "{assign}",
    "description": "Assign own properties of [source] to [subject].",
    "lineNumber": 86,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} the [subject] parameter."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "target object to populate with [source] properties."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "source of properties to populate [subject]."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "the [subject] parameter."
    }
  },
  {
    "__docId__": 166,
    "kind": "file",
    "name": "src/object/validate.js",
    "content": "/**\n * @module object/validate\n */\nimport { object } from \"../native/type\";\n\nimport { OBJECT_HAS_OWN } from \"../native/object\";\n\n/**\n * Returns true. if \"subject\" object contains property.\n *\n * @param {object} subject object to inspect.\n * @param {string} property property name to inspect\n * @returns {boolean} true if \"subject\" contains property. false otherwise.\n */\nexport function contains(subject, property) {\n  return object(subject) && OBJECT_HAS_OWN.call(subject, property);\n}\n",
    "static": true,
    "longname": "/opt/app/source/src/object/validate.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 167,
    "kind": "function",
    "name": "contains",
    "memberof": "src/object/validate.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/object/validate.js~contains",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/object/validate.js",
    "importStyle": "{contains}",
    "description": "Returns true. if \"subject\" object contains property.",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true if \"subject\" contains property. false otherwise."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "object to inspect."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "property",
        "description": "property name to inspect"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if \"subject\" contains property. false otherwise."
    }
  },
  {
    "__docId__": 168,
    "kind": "file",
    "name": "src/string/constants.js",
    "content": "export const STRING_TRIM_LEFT_REGEXP = /^[\\s\\uFEFF\\xA0]+/;\n\nexport const STRING_TRIM_RIGHT_REGEXP = /[\\s\\uFEFF\\xA0]+$/;\n\nexport const STRING_TRIM_REGEXP = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\nexport const TRIM_ERROR_NOT_STRING = \"Unable to trim invalid string.\";\n\nexport const DEFAULT_PADSTRING = \" \";\n",
    "static": true,
    "longname": "/opt/app/source/src/string/constants.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 169,
    "kind": "variable",
    "name": "STRING_TRIM_LEFT_REGEXP",
    "memberof": "src/string/constants.js",
    "static": true,
    "longname": "src/string/constants.js~STRING_TRIM_LEFT_REGEXP",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/string/constants.js",
    "importStyle": "{STRING_TRIM_LEFT_REGEXP}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 170,
    "kind": "variable",
    "name": "STRING_TRIM_RIGHT_REGEXP",
    "memberof": "src/string/constants.js",
    "static": true,
    "longname": "src/string/constants.js~STRING_TRIM_RIGHT_REGEXP",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/string/constants.js",
    "importStyle": "{STRING_TRIM_RIGHT_REGEXP}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 171,
    "kind": "variable",
    "name": "STRING_TRIM_REGEXP",
    "memberof": "src/string/constants.js",
    "static": true,
    "longname": "src/string/constants.js~STRING_TRIM_REGEXP",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/string/constants.js",
    "importStyle": "{STRING_TRIM_REGEXP}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 172,
    "kind": "variable",
    "name": "TRIM_ERROR_NOT_STRING",
    "memberof": "src/string/constants.js",
    "static": true,
    "longname": "src/string/constants.js~TRIM_ERROR_NOT_STRING",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/string/constants.js",
    "importStyle": "{TRIM_ERROR_NOT_STRING}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 173,
    "kind": "variable",
    "name": "DEFAULT_PADSTRING",
    "memberof": "src/string/constants.js",
    "static": true,
    "longname": "src/string/constants.js~DEFAULT_PADSTRING",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/string/constants.js",
    "importStyle": "{DEFAULT_PADSTRING}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 174,
    "kind": "file",
    "name": "src/string/format.js",
    "content": "import {\n  TYPE_STRING,\n  EMPTY_STRING\n} from \"../native/constants\";\n\nimport { numberify } from \"../number/format\";\n\nimport {\n  STRING_TRIM_LEFT_REGEXP,\n  STRING_TRIM_RIGHT_REGEXP,\n  TRIM_ERROR_NOT_STRING,\n  DEFAULT_PADSTRING\n} from \"./constants\";\n\nimport {\n  stringify\n} from \"./type\";\n\nimport {\n  listPadStart,\n  listPadEnd\n} from \"../array/service\";\n\n/**\n * Returns repeated string \"subject\" in \"count\" number of times.\n *\n * @param {string} subject any data convertible to string.\n * @param {number} count number of times to repeat.\n * @returns {string} Returns empty string if unable to repeat.\n */\nexport function repeat(subject, count) {\n  const empty = EMPTY_STRING;\n  const value = stringify(subject, empty);\n  let length = numberify(count, 0);\n  let list = null;\n\n  if (!value || length < 1) {\n    return value;\n  }\n\n  list = [];\n  length++;\n\n  for (let c = 0; length--; c++) {\n    list[c] = value;\n  }\n\n  return list.join(empty);\n}\n\n/**\n * Creates a padded string with another string (multiple times, if needed)\n * until the resulting string reaches the given length.\n * The padding is applied from the start of the string.\n *\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart}\n * @param {string} subject The string to pad.\n * @param {number} length The length of the resulting string once it has been padded.\n * @param {string} padString The string to pad the current string with.\n * @returns {string} string of the specified length with the pad string applied from the start.\n */\nexport function padStart(subject, length = 0, padString = DEFAULT_PADSTRING) {\n  return listPadStart(\n    stringify(subject),\n    length,\n    padString\n  ).join(EMPTY_STRING);\n}\n\n/**\n * Creates a padded string with another string (multiple times, if needed)\n * until the resulting string reaches the given length.\n * The padding is applied from the end of the string.\n *\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd}\n * @param {string} subject The string to pad.\n * @param {number} length The length of the resulting stringe once it has been padded.\n * @param {string} padString The string to pad the current string with.\n * @returns {string} string of the specified length with the pad string applied from the end.\n */\nexport function padEnd(subject, length = 0, padString = DEFAULT_PADSTRING) {\n  return listPadEnd(\n    stringify(subject),\n    length,\n    padString\n  ).join(EMPTY_STRING);\n}\n\n/**\n * Removes starting and ending white spaces.\n *\n * @param {string} subject The string to trim.\n * @returns {string} Whitespace trimmed string.\n */\nexport function trim(subject) {\n  const empty = EMPTY_STRING;\n\n  if (typeof subject !== TYPE_STRING) {\n    throw new TypeError(TRIM_ERROR_NOT_STRING);\n  }\n\n  return subject && subject\n    .replace(STRING_TRIM_LEFT_REGEXP, empty)\n    .replace(STRING_TRIM_RIGHT_REGEXP, empty);\n}\n\n/**\n * Removes starting white spaces.\n *\n * @param {string} subject The string to trim.\n * @returns {string} Whitespace trimmed string.\n */\nexport function trimStart(subject) {\n  if (typeof subject !== TYPE_STRING) {\n    throw new TypeError(TRIM_ERROR_NOT_STRING);\n  }\n\n  return subject && subject.replace(STRING_TRIM_LEFT_REGEXP, EMPTY_STRING);\n}\n\n/**\n * Removes ending whitespace.\n *\n * @param {string} subject The string to trim.\n * @returns {string} Whitespace trimmed string.\n */\nexport function trimEnd(subject) {\n  if (typeof subject !== TYPE_STRING) {\n    throw new TypeError(TRIM_ERROR_NOT_STRING);\n  }\n\n  return subject && subject.replace(STRING_TRIM_RIGHT_REGEXP, EMPTY_STRING);\n}\n",
    "static": true,
    "longname": "/opt/app/source/src/string/format.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 175,
    "kind": "function",
    "name": "repeat",
    "memberof": "src/string/format.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string/format.js~repeat",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/string/format.js",
    "importStyle": "{repeat}",
    "description": "Returns repeated string \"subject\" in \"count\" number of times.",
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Returns empty string if unable to repeat."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "any data convertible to string."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count",
        "description": "number of times to repeat."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Returns empty string if unable to repeat."
    }
  },
  {
    "__docId__": 176,
    "kind": "function",
    "name": "padStart",
    "memberof": "src/string/format.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string/format.js~padStart",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/string/format.js",
    "importStyle": "{padStart}",
    "description": "Creates a padded string with another string (multiple times, if needed)\nuntil the resulting string reaches the given length.\nThe padding is applied from the start of the string.",
    "see": [
      "{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart}"
    ],
    "lineNumber": 62,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} string of the specified length with the pad string applied from the start."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "The string to pad."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": "The length of the resulting string once it has been padded."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "padString",
        "description": "The string to pad the current string with."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "string of the specified length with the pad string applied from the start."
    }
  },
  {
    "__docId__": 177,
    "kind": "function",
    "name": "padEnd",
    "memberof": "src/string/format.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string/format.js~padEnd",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/string/format.js",
    "importStyle": "{padEnd}",
    "description": "Creates a padded string with another string (multiple times, if needed)\nuntil the resulting string reaches the given length.\nThe padding is applied from the end of the string.",
    "see": [
      "{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd}"
    ],
    "lineNumber": 81,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} string of the specified length with the pad string applied from the end."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "The string to pad."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": "The length of the resulting stringe once it has been padded."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "padString",
        "description": "The string to pad the current string with."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "string of the specified length with the pad string applied from the end."
    }
  },
  {
    "__docId__": 178,
    "kind": "function",
    "name": "trim",
    "memberof": "src/string/format.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string/format.js~trim",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/string/format.js",
    "importStyle": "{trim}",
    "description": "Removes starting and ending white spaces.",
    "lineNumber": 95,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Whitespace trimmed string."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "The string to trim."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Whitespace trimmed string."
    }
  },
  {
    "__docId__": 179,
    "kind": "function",
    "name": "trimStart",
    "memberof": "src/string/format.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string/format.js~trimStart",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/string/format.js",
    "importStyle": "{trimStart}",
    "description": "Removes starting white spaces.",
    "lineNumber": 113,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Whitespace trimmed string."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "The string to trim."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Whitespace trimmed string."
    }
  },
  {
    "__docId__": 180,
    "kind": "function",
    "name": "trimEnd",
    "memberof": "src/string/format.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string/format.js~trimEnd",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/string/format.js",
    "importStyle": "{trimEnd}",
    "description": "Removes ending whitespace.",
    "lineNumber": 127,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Whitespace trimmed string."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "The string to trim."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Whitespace trimmed string."
    }
  },
  {
    "__docId__": 181,
    "kind": "file",
    "name": "src/string/index.js",
    "content": "export {\n  stringify\n} from \"./type\";\n\nexport {\n  repeat,\n  trim,\n  trimStart,\n  trimEnd\n} from \"./format\";\n",
    "static": true,
    "longname": "/opt/app/source/src/string/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 182,
    "kind": "file",
    "name": "src/string/type.js",
    "content": "import {\n  TYPE_NUMBER,\n  TYPE_STRING,\n  TYPE_BOOLEAN,\n  TYPE_SYMBOL,\n\n  BOOLEAN_TRUE,\n  BOOLEAN_FALSE,\n  EMPTY_STRING\n} from \"../native/constants\";\n\nimport {\n  MATH_RANDOM,\n  MATH_ROUND\n} from \"../native/math\";\n\nimport {\n  STRING\n} from \"../native/string\";\n\n/**\n * Convert Any value to string. Or return \"defaultValue\" parameter.\n *\n * @category String\n * @param {*} subject data to convert to string.\n * @param {*} [defaultValue=\"\"] fallback value to return if conversion fails.\n * @returns {string|*} returns defaultValue if unable to convert to string.\n */\nexport function stringify(subject, defaultValue = EMPTY_STRING) {\n  const empty = EMPTY_STRING;\n\n  switch (typeof subject) {\n  case TYPE_BOOLEAN: return subject ? BOOLEAN_TRUE : BOOLEAN_FALSE;\n  case TYPE_NUMBER:\n    return isFinite(subject) ? empty + subject : defaultValue;\n\n  case TYPE_STRING: return subject;\n  case TYPE_SYMBOL:\n    return [\n      STRING(subject),\n      \"[\",\n      (new Date()).getTime().toString(16),\n      MATH_ROUND(MATH_RANDOM() * 1000).toString(16),\n      \"]\"\n    ].join(empty);\n  }\n\n  return defaultValue;\n}\n",
    "static": true,
    "longname": "/opt/app/source/src/string/type.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 183,
    "kind": "function",
    "name": "stringify",
    "memberof": "src/string/type.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string/type.js~stringify",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/string/type.js",
    "importStyle": "{stringify}",
    "description": "Convert Any value to string. Or return \"defaultValue\" parameter.",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@category",
        "tagValue": "String"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string|*} returns defaultValue if unable to convert to string."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "data to convert to string."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"\"",
        "defaultRaw": "",
        "name": "defaultValue",
        "description": "fallback value to return if conversion fails."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string",
        "*"
      ],
      "spread": false,
      "description": "returns defaultValue if unable to convert to string."
    }
  },
  {
    "__docId__": 184,
    "kind": "file",
    "name": "src/unicode/Utf.js",
    "content": "import {\n  TYPE_NUMBER,\n  TYPE_UNDEFINED,\n  EMPTY_STRING,\n  NOT_NUMBER,\n  TYPE_STRING\n} from \"../native/constants\";\n\nimport { OBJECT_DEFINE_PROPERTY } from \"../native/object\";\n\nimport {\n  IS_FINITE\n} from \"../native/number\";\n\nimport {\n  MATH_MAX,\n  MATH_MIN,\n  MATH_FLOOR\n} from \"../native/math\";\n\nimport {\n  ARRAY_PUSH,\n  ARRAY_SLICE\n} from \"../native/array\";\n\nimport {\n  REGEXP\n} from \"../native/regexp\";\n\nimport {\n  regexp,\n  method\n} from \"../native/type\";\n\nimport {\n  listPadStart,\n  listPadEnd\n} from \"../array/service\";\n\nimport {\n  STRING_TRIM_REGEXP,\n  STRING_TRIM_LEFT_REGEXP,\n  STRING_TRIM_RIGHT_REGEXP,\n  DEFAULT_PADSTRING\n} from \"../string/constants\";\n\nimport { stringify } from \"../string/type\";\n\nimport {\n  INVALID_REPEAT_COUNT_ERROR\n} from \"./constants\";\n\nimport {\n  eachUnicode,\n  string2codePoints,\n  string2unicodes\n} from \"./service\";\n\n/**\n * String.prototype.replace() callback.\n *\n * @callback stringReplaceCallback\n * @param {string} matched string matched by replace() pattern.\n * @param {...string} captures string match captures in pattern.\n * @param {number} offset the zero-based index position of the current match.\n * @param {string} subject the string calling replace(pattern, callback).\n */\n\n/**\n * Utf Class for unicode representation of String.\n */\nexport class Utf {\n  /**\n   * Creates Utf instance based from string or Utf16 (cloning).\n   *\n   * @param {string|Utf} subject The string to create from.\n   */\n  constructor(subject) {\n    const empty = EMPTY_STRING;\n    const defineProperty = OBJECT_DEFINE_PROPERTY;\n    let points = [];\n    let text = null;\n    let length = 0;\n\n    // create clone\n    if (subject instanceof Utf) {\n      text = subject.text;\n      length = subject.length;\n\n      if (text !== empty) {\n        ARRAY_PUSH.apply(this, subject);\n        points = subject.points.slice(0);\n      }\n    }\n    else {\n      text = stringify(subject);\n      length = eachUnicode(\n        subject,\n        (codePoint, char, index) => {\n          this[index] = char;\n          points[index] = codePoint;\n        }\n      );\n    }\n\n    /**\n     * @property {number} length\n     */\n    defineProperty(\n      this,\n      \"length\",\n      {\n        writable: false,\n        enumerable: false,\n        configurable: true,\n        value: length\n      }\n    );\n\n    /**\n     * @property {number[]} points\n     */\n    defineProperty(\n      this,\n      \"points\",\n      {\n        writable: false,\n        enumerable: false,\n        configurable: true,\n        value: points\n      }\n    );\n\n    /**\n     * @property {string} text\n     */\n    defineProperty(\n      this,\n      \"text\",\n      {\n        writable: false,\n        enumerable: false,\n        configurable: true,\n        value: text\n      }\n    );\n  }\n\n  /**\n   * Extracts Unicode code point at givent [index] position.\n   *\n   * @param {number} index The character position to extract Unicode code point.\n   * @returns {number} The extracted Unicode code point.\n   */\n  codePointAt(index) {\n    if (typeof index === TYPE_NUMBER && index > -1 && index < this.length) {\n      return this.points[index];\n    }\n\n    return NOT_NUMBER;\n  }\n\n  /**\n   * Extracts string at given [index] position.\n   * Please note that length of string is possibly greater than 1 characters.\n   *\n   * @param {number} index The character position to extract.\n   * @returns {string} The extracted string\n   */\n  charAt(index) {\n    if (typeof index === TYPE_NUMBER && index > -1 && index < this.length) {\n      return this[index];\n    }\n\n    return EMPTY_STRING;\n  }\n\n  /**\n   * Creates new Utf instance with only extracted section of the string.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice}\n   * @param {*} begin The zero-based index at which to begin extraction. If negative, it is treated as str.length + beginIndex.\n   * @param {*} end The zero-based index before which to end extraction. The character at this index will not be included.\n   * @returns {Utf} Utf instance with containing extracted string.\n   */\n  slice(begin, end) {\n    const min = MATH_MIN;\n    const max = MATH_MAX;\n    const empty = EMPTY_STRING;\n    const length = this.length;\n\n    let start = min(begin, length) || 0;\n    let limit = typeof end === TYPE_UNDEFINED ? length : min(end, length) || 0;\n\n    if (start < 0) {\n      start = max(length + start, 0);\n    }\n\n    if (limit < 0) {\n      limit = max(length + limit, 0);\n    }\n\n    if (start >= limit) {\n      return new Utf(empty);\n    }\n\n    return new Utf(\n      ARRAY_SLICE.call(this, start, limit).join(empty)\n    );\n  }\n\n  /**\n   * Creates Utf instance containing part of string between [begin] and [end].\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring}\n   * @param {number} begin The index of the first Unicode character to include in the returned substring.\n   * @param {number} [end] The index of the first Unicode character to exclude from the returned substring.\n   * @returns {Utf} Utf instance containing extracted string.\n   */\n  substring(begin, end = undefined) {\n    const min = MATH_MIN;\n    const max = MATH_MAX;\n    const empty = EMPTY_STRING;\n    const length = this.length;\n\n    let start = min(max(begin, 0) || 0, length);\n    let limit = typeof end === TYPE_UNDEFINED ? length : min(max(end, 0) || 0, length);\n\n    if (start === limit) {\n      return new Utf(empty);\n    }\n\n    // swap\n    if (start > limit) {\n      start -= limit;\n      limit += start;\n      start = limit - start;\n    }\n\n    return new Utf(\n      ARRAY_SLICE.call(this, start, limit).join(empty)\n    );\n  }\n\n  /**\n   * Creates Utf instance by concatenating Utf instances or strings.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat}\n   * @param {...(string|Utf)} subject strings or Ut16 instances to concatentate.\n   * @returns {Utf} Utf instance containing concatenated strings and Utf16s\n   */\n  concat(...subject) {\n    const toString = stringify;\n    const Me = Utf;\n    const empty = EMPTY_STRING;\n    const strings = [];\n    let c = 0;\n\n    for (let length = subject.length; length--; c++) {\n      const value = subject[c];\n\n      strings[c] = value instanceof Me ? value.text : toString(value);\n    }\n\n    return new Me(\n      c ? strings.join(empty) : empty\n    );\n  }\n\n  /**\n   * Retrieves zero-based index position that first matches the FIRST occurence\n   * of [searchValue] in Utf instance starting from zero or [fromIndex] if specified.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf}\n   * @param {string|Utf} searchValue The string or Utf instance to search.\n   * @param {number} [fromIndex=0] The index to start the search.\n   * @returns {number} Returns the zero-based index. Or, -1 if not found.\n   */\n  indexOf(searchValue, fromIndex = 0) {\n    const subject = this.points;\n    const searchPoints = searchValue instanceof Utf ? searchValue.points\n      : string2codePoints(\n        stringify(searchValue, EMPTY_STRING)\n      );\n    const searchLength = searchPoints.length;\n    const subjectLength = subject.length;\n    let anchor = fromIndex;\n    let length = subjectLength;\n    let slength = 0;\n\n    if (!subjectLength ||\n      searchLength > subjectLength ||\n      typeof anchor !== TYPE_NUMBER ||\n      !IS_FINITE(anchor)\n    ) {\n      return -1;\n    }\n\n    // empty string rules from MDN\n    if (!searchLength) {\n      return MATH_MAX(0, MATH_MIN(anchor, subjectLength));\n    }\n    // more than length\n    else if (anchor >= subjectLength) {\n      return -1;\n    }\n    // finalize iteration anchor\n    else if (anchor < 0) {\n      anchor = 0;\n    }\n    else if (anchor > 0) {\n      length = subjectLength - anchor;\n    }\n\n    /* eslint no-labels: 0 */\n    mainLoop: for (; length--; anchor++) {\n      if (anchor + searchLength - 1 > subjectLength) {\n        return -1;\n      }\n\n      slength = searchLength;\n      for (; slength--;) {\n        if (searchPoints[slength] !== subject[anchor + slength]) {\n          continue mainLoop;\n        }\n      }\n\n      // found!\n      return anchor;\n    }\n\n    return -1;\n  }\n\n  /**\n   * Retrieves zero-based index position that first matches the LAST occurence\n   * of [searchValue] in Utf instance starting from zero or [fromIndex] if specified.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf}\n   * @param {string|Utf} searchValue The string or Utf instance to search.\n   * @param {number} [fromIndex] The index to start the search.\n   * @returns {number} Returns the zero-based index. Or, -1 if not found.\n   */\n  lastIndexOf(searchValue, fromIndex = null) {\n    const min = MATH_MIN;\n    const subject = this.points;\n    const searchPoints = searchValue instanceof Utf ? searchValue.points\n      : string2codePoints(\n        stringify(searchValue, EMPTY_STRING)\n      );\n    const searchLength = searchPoints.length;\n    const subjectLength = subject.length;\n    let anchor = fromIndex === null ? subjectLength : fromIndex;\n    let length = 0;\n\n    if (!subjectLength ||\n      searchLength > subjectLength ||\n      typeof anchor !== TYPE_NUMBER ||\n      !IS_FINITE(anchor)\n    ) {\n      return -1;\n    }\n\n    anchor = MATH_MAX(0, min(anchor, subjectLength));\n    if (!searchLength) {\n      return anchor;\n    }\n\n    anchor = min(anchor, subjectLength - searchLength);\n    if (anchor < 0) {\n      return -1;\n    }\n\n    /* eslint no-labels: 0 */\n    mainLoop: for (; anchor + 1; anchor--) {\n      length = searchLength;\n      for (; length--;) {\n        if (searchPoints[length] !== subject[anchor + length]) {\n          continue mainLoop;\n        }\n      }\n      return anchor;\n    }\n\n    return -1;\n  }\n\n  /**\n   * Searches the Utf string with given RegExp [pattern] and\n   * returns the zero-based index position of the first occurence.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search}\n   * @param {RegExp} pattern The RegExp pattern to match.\n   * @returns {number} Returns zero-based index if found. Returns -1 otherwise.\n   */\n  search(pattern) {\n    const matches = this.text.match(REGEXP(pattern));\n\n    // correct the index\n    if (!matches) {\n      return -1;\n    }\n\n    return this.indexOf(matches[0]);\n  }\n\n  /**\n   * Determines if Utf or string [keyword] is found in this instance.\n   *\n   * @see {@link http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode}\n   * @param {string|Utf} keyword The search keyword to match.\n   * @param {number} position The zero-based index position to start the search.\n   * @returns {boolean} Returns true if match is found. Returns false otherwise.\n   */\n  includes(keyword, position) {\n    return this.indexOf(keyword, position) !== -1;\n  }\n\n  /**\n   * The method returns a number indicating whether a reference string comes before or after\n   * or is the same as the given string in sort order.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare}\n   * @param {string|Utf} compareString The string or Utf16 against which the referring Utf is compared.\n   * @param {string} [locales] A string with a BCP 47 language tag, or an array of such strings.\n   * @param {object} [options] An object with some or all of the following properties:\n   * @param {string} [options.localeMatcher=\"best fit\"] Possible values: \"lookup\" or \"best fit\"\n   * @param {string} [options.usage=\"sort\"] Possible values: \"sort\" and \"search\"\n   * @param {string} [options.sensitivity=\"variant\"] Possible values: \"variant\", \"case\", \"accent\", and \"base\"\n   * @param {boolean} [options.ignorePunctuation=false] Should ignore punctation or not.\n   * @param {boolean} [options.numeric=false] Whether numeric collation should be used, such that \"1\" < \"2\" < \"10\".\n   * @param {string} [options.caseFirst=\"false\"] Whether upper case or lower case should sort first.\n   *                    Possible values are \"upper\", \"lower\", or \"false\" (use the locale's default).\n   * @returns {number} Returns negative number if Utf occurs before [compareString].\n   *                    Returns positive number if Utf occurs after [compareString].\n   *                    Returns zero (0) if equivalent.\n   */\n  localeCompare(compareString, locales, options) {\n    const subject = compareString instanceof Utf ? compareString.text : compareString;\n    const length = arguments.length;\n    const string = this.text;\n\n    return length < 2 ? string.localeCompare(subject)\n      : length < 3 ? string.localeCompare(subject, locales)\n        : string.localeCompare(subject, locales, options);\n  }\n\n  /**\n   * Retrieves the result of matching a string against a regular expression.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match}\n   * @param {RegExp} pattern A regular expression object.\n   * @returns {Utf[]|null} Returns Array of Utf matches. Or, null of not matches.\n   */\n  match(pattern) {\n    const Me = Utf;\n    const found = this.text.match(pattern);\n    let c = 0;\n    let length = 0;\n\n    if (found) {\n      for (; length--; c++) {\n        found[c] = new Me(found[c]);\n      }\n    }\n\n    return found;\n  }\n\n  /**\n   * Creates a padded Utf instance with another string (multiple times, if needed)\n   * until the resulting string reaches the given length.\n   * The padding is applied from the start of the current Utf instance.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart}\n   * @param {number} targetLength The length of the resulting Utf instance once it has been padded.\n   * @param {string|Utf} padString The string to pad the current Utf instance with.\n   * @returns {Utf} Utf instance of the specified length with the pad string applied from the start.\n   */\n  padStart(targetLength, padString = DEFAULT_PADSTRING) {\n    const empty = EMPTY_STRING;\n    const pad = padString instanceof Utf ? padString\n      : string2unicodes(\n        stringify(padString, empty)\n      );\n    const result = listPadStart(this, targetLength, pad);\n\n    return new Utf(\n      result.join(empty)\n    );\n  }\n\n  /**\n   * Creates a padded Utf instance with another string (multiple times, if needed)\n   * until the resulting string reaches the given length.\n   * The padding is applied from the end of the Utf instance.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd}\n   * @param {number} targetLength The length of the resulting Utf instance once it has been padded.\n   * @param {string|Utf} padString The string to pad the current Utf instance with.\n   * @returns {Utf} Utf instance of the specified length with the pad string applied from the start.\n   */\n  padEnd(targetLength, padString = DEFAULT_PADSTRING) {\n    const empty = EMPTY_STRING;\n    const pad = padString instanceof Utf ? padString\n      : string2unicodes(\n        stringify(padString, empty)\n      );\n    const result = listPadEnd(this, targetLength, pad);\n\n    return new Utf(\n      result.join(empty)\n    );\n  }\n\n  /**\n   * Creates Utf instance with repeated unicode text.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat}\n   * @param {number} count Number of repeats.\n   * @returns {Utf} Returns instance with repeated text.\n   */\n  repeat(count) {\n    const string = this.text;\n    let result = null;\n    let c = 0;\n    let length = 0;\n\n    if (typeof count !== TYPE_NUMBER || !IS_FINITE(count) || count < 0) {\n      throw new RangeError(INVALID_REPEAT_COUNT_ERROR);\n    }\n\n    length = MATH_FLOOR(count);\n    result = [];\n    for (; length--; c++) {\n      result[c] = string;\n    }\n\n    return new Utf(\n      result.join(EMPTY_STRING)\n    );\n  }\n\n  /**\n   * Safely splits unicode characters into list of Utf instances using a [separator] pattern.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split}\n   * @param {string|RegExp|Utf} separator Separator pattern used for splitting.\n   * @param {number} [limit] Limit number of splits.\n   * @returns {Utf[]} Collection of Utf instances.\n   */\n  split(separator, limit) {\n    const Me = Utf;\n    const me = this;\n    const empty = EMPTY_STRING;\n    const subjectLength = me.length;\n    const isRegex = regexp(separator);\n    const isUtfInstance = separator instanceof Me;\n    let limiter = typeof limit === TYPE_NUMBER && IS_FINITE(limit) && limit > -1\n      ? limit\n      : limit === null\n        ? 0\n        : undefined;\n    let stringSeparator = isUtfInstance\n      ? separator.text\n      : isRegex || typeof separator === TYPE_STRING\n        ? separator\n        : stringify(separator);\n    // safely return split version\n    let result = null;\n    let resultLength = 0;\n    let buffer = null;\n    let bufferLength = 0;\n    let separatorLength = 0;\n    let slength = 0;\n    let c = 0;\n    let length = 0;\n    let matchPointer = 0;\n    let isLast = false;\n    let pos = null;\n\n    // usual split\n    if (isRegex || stringSeparator === empty) {\n      result = isRegex\n        ? me.text.split(stringSeparator, limiter)\n        : ARRAY_SLICE.call(\n          me,\n          0,\n          limiter\n        );\n      length = result.length;\n      // replace\n      for (; length--; c++) {\n        result[c] = new Me(result[c]);\n      }\n      return result;\n    }\n\n    // manual split\n    length = subjectLength;\n\n    stringSeparator = isUtfInstance ? separator : string2unicodes(separator);\n    separatorLength = stringSeparator.length;\n\n    // replace\n    buffer = [];\n    result = [];\n    if (typeof limiter === TYPE_UNDEFINED) {\n      limiter = subjectLength;\n    }\n    mainLoop: for (; length--; c++) {\n      isLast = length === 0;\n\n      // check if separator matches\n      slength = separatorLength;\n      matchPointer = 0;\n\n      for (; slength--; matchPointer++) {\n        pos = c + matchPointer;\n        // failed!\n        if (pos >= subjectLength ||\n          stringSeparator[matchPointer] !== me[pos]\n        ) {\n          buffer[bufferLength++] = me[c];\n          if (!isLast) {\n            continue mainLoop;\n          }\n        }\n      }\n\n      // generate result from buffer\n      result[resultLength++] = new Me(\n        bufferLength ? buffer.join(empty) : empty\n      );\n\n      // stop!\n      if (resultLength === limiter) {\n        break mainLoop;\n      }\n      // reset buffer\n      else if (!isLast) {\n        buffer = [];\n        bufferLength = 0;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Creates new Utf instance with replacing unicode characters with [replacement] using [pattern].\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace}\n   * @param {string|Utf|RegExp} pattern The pattern to match for replacement.\n   * @param {string|Utf|stringReplaceCallback} replacement function callback or string replacement.\n   * @returns {Utf} Utf instance with replaced unicode characters.\n   */\n  replace(pattern, replacement) {\n    const Me = Utf;\n\n    return new Me(\n      this.text.replace(\n        pattern instanceof Me\n          ? pattern.text\n          : regexp(pattern)\n            ? pattern\n            : stringify(pattern),\n        replacement instanceof Me\n          ? replacement.text\n          : method(replacement)\n            ? replacement\n            : stringify(replacement)\n      )\n    );\n  }\n\n  /**\n   * Removes whitespace characters prefix and suffix.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim}\n   * @returns {Utf} new Utf instance with whitespaces removed.\n   */\n  trim() {\n    return new Utf(\n      this.text.replace(STRING_TRIM_REGEXP, EMPTY_STRING)\n    );\n  }\n\n  /**\n   * Removes whitespace characters prefix.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimStart}\n   * @returns {Utf} new Utf instance with whitespaces removed.\n   */\n  trimStart() {\n    return new Utf(\n      this.text.replace(STRING_TRIM_LEFT_REGEXP, EMPTY_STRING)\n    );\n  }\n\n  /**\n   * Removes whitespace characters suffix.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimEnd}\n   * @returns {Utf} new Utf instance with whitespaces removed.\n   */\n  trimEnd() {\n    return new Utf(\n      this.text.replace(STRING_TRIM_RIGHT_REGEXP, EMPTY_STRING)\n    );\n  }\n\n  /**\n   * Clones Utf instance.\n   *\n   * @returns {Utf} cloned Utf instance.\n   */\n  clone() {\n    return new Utf(this);\n  }\n\n  /**\n   * Generates list of Utf code points.\n   *\n   * @returns {number[]} List of Unicode code points.\n   */\n  toPoints() {\n    return this.points.slice(0);\n  }\n\n  /**\n   * Creates Utf instance with string converted to upper-case.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase}\n   * @returns {Utf} Utf instance with upper-case string.\n   */\n  toUpperCase() {\n    return new Utf(\n      this.text.toUpperCase()\n    );\n  }\n\n  /**\n   * Creates Utf instance with string converted to upper-case according to any locale-specific case mappings.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase}\n   * @param {string|string[]} [locale] The locale/s to be used to convert to upper case according to any locale-specific case mappings.\n   * @returns {Utf} Utf Instance with upper-case string.\n   */\n  toLocaleUpperCase(locale) {\n    return new Utf(\n      this.text.toLocaleUpperCase(locale)\n    );\n  }\n\n  /**\n   * Creates Utf instance with string converted to lower-case.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase}\n   * @returns {Utf} Utf instance with lower-case string.\n   */\n  toLowerCase() {\n    return new Utf(\n      this.text.toLowerCase()\n    );\n  }\n\n  /**\n   * Creates Utf instance with string converted to lower-case according to any locale-specific case mappings.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase}\n   * @param {string|string[]} [locale] The locale/s to be used to convert to upper case according to any locale-specific case mappings.\n   * @returns {Utf} Utf instance with lower-case string.\n   */\n  toLocaleLowerCase(locale) {\n    return new Utf(\n      this.text.toLocaleLowerCase(locale)\n    );\n  }\n\n  /**\n   * Returns the JSON representation.\n   *\n   * @returns {string} JSON representation of Utf instance.\n   */\n  toJSON() {\n    return this.text;\n  }\n\n  /**\n   * Returns the Array representation of Utf instance.\n   *\n   * @returns {string[]} Array representation.\n   */\n  toArray() {\n    return ARRAY_SLICE.call(this, 0);\n  }\n\n  /**\n   * Returns the String representation of Uft instance.\n   *\n   * @returns {string} String representation of Utf intance.\n   */\n  toString() {\n    return this.text;\n  }\n\n  /**\n   * Returns the primitive value of this instance which is a string.\n   *\n   * @returns {string} String primitive value.\n   */\n  valueOf() {\n    return this.text;\n  }\n}\n\nexport const EMPTY_UNICODE = new Utf(EMPTY_STRING);\n",
    "static": true,
    "longname": "/opt/app/source/src/unicode/Utf.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 185,
    "kind": "class",
    "name": "Utf",
    "memberof": "src/unicode/Utf.js",
    "static": true,
    "longname": "src/unicode/Utf.js~Utf",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/unicode/Utf.js",
    "importStyle": "{Utf}",
    "description": "Utf Class for unicode representation of String.",
    "lineNumber": 72,
    "interface": false
  },
  {
    "__docId__": 186,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/unicode/Utf.js~Utf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/unicode/Utf.js~Utf#constructor",
    "access": "public",
    "description": "Creates Utf instance based from string or Utf16 (cloning).",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Utf"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "The string to create from."
      }
    ]
  },
  {
    "__docId__": 187,
    "kind": "member",
    "name": "[index]",
    "memberof": "src/unicode/Utf.js~Utf",
    "static": false,
    "longname": "src/unicode/Utf.js~Utf#[index]",
    "access": "public",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "codePointAt",
    "memberof": "src/unicode/Utf.js~Utf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/unicode/Utf.js~Utf#codePointAt",
    "access": "public",
    "description": "Extracts Unicode code point at givent [index] position.",
    "lineNumber": 155,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The extracted Unicode code point."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "The character position to extract Unicode code point."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The extracted Unicode code point."
    }
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "charAt",
    "memberof": "src/unicode/Utf.js~Utf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/unicode/Utf.js~Utf#charAt",
    "access": "public",
    "description": "Extracts string at given [index] position.\nPlease note that length of string is possibly greater than 1 characters.",
    "lineNumber": 170,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The extracted string"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "The character position to extract."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The extracted string"
    }
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "slice",
    "memberof": "src/unicode/Utf.js~Utf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/unicode/Utf.js~Utf#slice",
    "access": "public",
    "description": "Creates new Utf instance with only extracted section of the string.",
    "see": [
      "{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice}"
    ],
    "lineNumber": 186,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Utf} Utf instance with containing extracted string."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "begin",
        "description": "The zero-based index at which to begin extraction. If negative, it is treated as str.length + beginIndex."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "The zero-based index before which to end extraction. The character at this index will not be included."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Utf"
      ],
      "spread": false,
      "description": "Utf instance with containing extracted string."
    }
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "substring",
    "memberof": "src/unicode/Utf.js~Utf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/unicode/Utf.js~Utf#substring",
    "access": "public",
    "description": "Creates Utf instance containing part of string between [begin] and [end].",
    "see": [
      "{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring}"
    ],
    "lineNumber": 220,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Utf} Utf instance containing extracted string."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "begin",
        "description": "The index of the first Unicode character to include in the returned substring."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "end",
        "description": "The index of the first Unicode character to exclude from the returned substring."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Utf"
      ],
      "spread": false,
      "description": "Utf instance containing extracted string."
    }
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "concat",
    "memberof": "src/unicode/Utf.js~Utf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/unicode/Utf.js~Utf#concat",
    "access": "public",
    "description": "Creates Utf instance by concatenating Utf instances or strings.",
    "see": [
      "{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat}"
    ],
    "lineNumber": 252,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Utf} Utf instance containing concatenated strings and Utf16s"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "...(string|Utf)"
        ],
        "spread": true,
        "optional": false,
        "name": "subject",
        "description": "strings or Ut16 instances to concatentate."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Utf"
      ],
      "spread": false,
      "description": "Utf instance containing concatenated strings and Utf16s"
    }
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "indexOf",
    "memberof": "src/unicode/Utf.js~Utf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/unicode/Utf.js~Utf#indexOf",
    "access": "public",
    "description": "Retrieves zero-based index position that first matches the FIRST occurence\nof [searchValue] in Utf instance starting from zero or [fromIndex] if specified.",
    "see": [
      "{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf}"
    ],
    "lineNumber": 279,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Returns the zero-based index. Or, -1 if not found."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Utf"
        ],
        "spread": false,
        "optional": false,
        "name": "searchValue",
        "description": "The string or Utf instance to search."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "fromIndex",
        "description": "The index to start the search."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Returns the zero-based index. Or, -1 if not found."
    }
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "lastIndexOf",
    "memberof": "src/unicode/Utf.js~Utf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/unicode/Utf.js~Utf#lastIndexOf",
    "access": "public",
    "description": "Retrieves zero-based index position that first matches the LAST occurence\nof [searchValue] in Utf instance starting from zero or [fromIndex] if specified.",
    "see": [
      "{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf}"
    ],
    "lineNumber": 344,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Returns the zero-based index. Or, -1 if not found."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Utf"
        ],
        "spread": false,
        "optional": false,
        "name": "searchValue",
        "description": "The string or Utf instance to search."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "fromIndex",
        "description": "The index to start the search."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Returns the zero-based index. Or, -1 if not found."
    }
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "search",
    "memberof": "src/unicode/Utf.js~Utf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/unicode/Utf.js~Utf#search",
    "access": "public",
    "description": "Searches the Utf string with given RegExp [pattern] and\nreturns the zero-based index position of the first occurence.",
    "see": [
      "{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search}"
    ],
    "lineNumber": 396,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Returns zero-based index if found. Returns -1 otherwise."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "pattern",
        "description": "The RegExp pattern to match."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Returns zero-based index if found. Returns -1 otherwise."
    }
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "includes",
    "memberof": "src/unicode/Utf.js~Utf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/unicode/Utf.js~Utf#includes",
    "access": "public",
    "description": "Determines if Utf or string [keyword] is found in this instance.",
    "see": [
      "{@link http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode}"
    ],
    "lineNumber": 415,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Returns true if match is found. Returns false otherwise."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Utf"
        ],
        "spread": false,
        "optional": false,
        "name": "keyword",
        "description": "The search keyword to match."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "The zero-based index position to start the search."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true if match is found. Returns false otherwise."
    }
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "localeCompare",
    "memberof": "src/unicode/Utf.js~Utf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/unicode/Utf.js~Utf#localeCompare",
    "access": "public",
    "description": "The method returns a number indicating whether a reference string comes before or after\nor is the same as the given string in sort order.",
    "see": [
      "{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare}"
    ],
    "lineNumber": 438,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Returns negative number if Utf occurs before [compareString].\n                   Returns positive number if Utf occurs after [compareString].\n                   Returns zero (0) if equivalent."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Utf"
        ],
        "spread": false,
        "optional": false,
        "name": "compareString",
        "description": "The string or Utf16 against which the referring Utf is compared."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "locales",
        "description": "A string with a BCP 47 language tag, or an array of such strings."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "An object with some or all of the following properties:"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"best fit\"",
        "defaultRaw": "best fit",
        "name": "options.localeMatcher",
        "description": "Possible values: \"lookup\" or \"best fit\""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"sort\"",
        "defaultRaw": "sort",
        "name": "options.usage",
        "description": "Possible values: \"sort\" and \"search\""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"variant\"",
        "defaultRaw": "variant",
        "name": "options.sensitivity",
        "description": "Possible values: \"variant\", \"case\", \"accent\", and \"base\""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.ignorePunctuation",
        "description": "Should ignore punctation or not."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.numeric",
        "description": "Whether numeric collation should be used, such that \"1\" < \"2\" < \"10\"."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"false\"",
        "defaultRaw": "false",
        "name": "options.caseFirst",
        "description": "Whether upper case or lower case should sort first.\n                   Possible values are \"upper\", \"lower\", or \"false\" (use the locale's default)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Returns negative number if Utf occurs before [compareString].\n                   Returns positive number if Utf occurs after [compareString].\n                   Returns zero (0) if equivalent."
    }
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "match",
    "memberof": "src/unicode/Utf.js~Utf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/unicode/Utf.js~Utf#match",
    "access": "public",
    "description": "Retrieves the result of matching a string against a regular expression.",
    "see": [
      "{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match}"
    ],
    "lineNumber": 455,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Utf[]|null} Returns Array of Utf matches. Or, null of not matches."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "pattern",
        "description": "A regular expression object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Utf[]",
        "null"
      ],
      "spread": false,
      "description": "Returns Array of Utf matches. Or, null of not matches."
    }
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "padStart",
    "memberof": "src/unicode/Utf.js~Utf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/unicode/Utf.js~Utf#padStart",
    "access": "public",
    "description": "Creates a padded Utf instance with another string (multiple times, if needed)\nuntil the resulting string reaches the given length.\nThe padding is applied from the start of the current Utf instance.",
    "see": [
      "{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart}"
    ],
    "lineNumber": 480,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Utf} Utf instance of the specified length with the pad string applied from the start."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "targetLength",
        "description": "The length of the resulting Utf instance once it has been padded."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Utf"
        ],
        "spread": false,
        "optional": false,
        "name": "padString",
        "description": "The string to pad the current Utf instance with."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Utf"
      ],
      "spread": false,
      "description": "Utf instance of the specified length with the pad string applied from the start."
    }
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "padEnd",
    "memberof": "src/unicode/Utf.js~Utf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/unicode/Utf.js~Utf#padEnd",
    "access": "public",
    "description": "Creates a padded Utf instance with another string (multiple times, if needed)\nuntil the resulting string reaches the given length.\nThe padding is applied from the end of the Utf instance.",
    "see": [
      "{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd}"
    ],
    "lineNumber": 503,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Utf} Utf instance of the specified length with the pad string applied from the start."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "targetLength",
        "description": "The length of the resulting Utf instance once it has been padded."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Utf"
        ],
        "spread": false,
        "optional": false,
        "name": "padString",
        "description": "The string to pad the current Utf instance with."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Utf"
      ],
      "spread": false,
      "description": "Utf instance of the specified length with the pad string applied from the start."
    }
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "repeat",
    "memberof": "src/unicode/Utf.js~Utf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/unicode/Utf.js~Utf#repeat",
    "access": "public",
    "description": "Creates Utf instance with repeated unicode text.",
    "see": [
      "{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat}"
    ],
    "lineNumber": 523,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Utf} Returns instance with repeated text."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count",
        "description": "Number of repeats."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Utf"
      ],
      "spread": false,
      "description": "Returns instance with repeated text."
    }
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "split",
    "memberof": "src/unicode/Utf.js~Utf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/unicode/Utf.js~Utf#split",
    "access": "public",
    "description": "Safely splits unicode characters into list of Utf instances using a [separator] pattern.",
    "see": [
      "{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split}"
    ],
    "lineNumber": 552,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Utf[]} Collection of Utf instances."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "RegExp",
          "Utf"
        ],
        "spread": false,
        "optional": false,
        "name": "separator",
        "description": "Separator pattern used for splitting."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "limit",
        "description": "Limit number of splits."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Utf[]"
      ],
      "spread": false,
      "description": "Collection of Utf instances."
    }
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "replace",
    "memberof": "src/unicode/Utf.js~Utf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/unicode/Utf.js~Utf#replace",
    "access": "public",
    "description": "Creates new Utf instance with replacing unicode characters with [replacement] using [pattern].",
    "see": [
      "{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace}"
    ],
    "lineNumber": 658,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Utf} Utf instance with replaced unicode characters."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Utf",
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "pattern",
        "description": "The pattern to match for replacement."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Utf",
          "stringReplaceCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "replacement",
        "description": "function callback or string replacement."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Utf"
      ],
      "spread": false,
      "description": "Utf instance with replaced unicode characters."
    }
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "trim",
    "memberof": "src/unicode/Utf.js~Utf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/unicode/Utf.js~Utf#trim",
    "access": "public",
    "description": "Removes whitespace characters prefix and suffix.",
    "see": [
      "{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim}"
    ],
    "lineNumber": 683,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Utf} new Utf instance with whitespaces removed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Utf"
      ],
      "spread": false,
      "description": "new Utf instance with whitespaces removed."
    },
    "params": []
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "trimStart",
    "memberof": "src/unicode/Utf.js~Utf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/unicode/Utf.js~Utf#trimStart",
    "access": "public",
    "description": "Removes whitespace characters prefix.",
    "see": [
      "{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimStart}"
    ],
    "lineNumber": 695,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Utf} new Utf instance with whitespaces removed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Utf"
      ],
      "spread": false,
      "description": "new Utf instance with whitespaces removed."
    },
    "params": []
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "trimEnd",
    "memberof": "src/unicode/Utf.js~Utf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/unicode/Utf.js~Utf#trimEnd",
    "access": "public",
    "description": "Removes whitespace characters suffix.",
    "see": [
      "{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimEnd}"
    ],
    "lineNumber": 707,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Utf} new Utf instance with whitespaces removed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Utf"
      ],
      "spread": false,
      "description": "new Utf instance with whitespaces removed."
    },
    "params": []
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "clone",
    "memberof": "src/unicode/Utf.js~Utf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/unicode/Utf.js~Utf#clone",
    "access": "public",
    "description": "Clones Utf instance.",
    "lineNumber": 718,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Utf} cloned Utf instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Utf"
      ],
      "spread": false,
      "description": "cloned Utf instance."
    },
    "params": []
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "toPoints",
    "memberof": "src/unicode/Utf.js~Utf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/unicode/Utf.js~Utf#toPoints",
    "access": "public",
    "description": "Generates list of Utf code points.",
    "lineNumber": 727,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number[]} List of Unicode code points."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": "List of Unicode code points."
    },
    "params": []
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "toUpperCase",
    "memberof": "src/unicode/Utf.js~Utf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/unicode/Utf.js~Utf#toUpperCase",
    "access": "public",
    "description": "Creates Utf instance with string converted to upper-case.",
    "see": [
      "{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase}"
    ],
    "lineNumber": 737,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Utf} Utf instance with upper-case string."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Utf"
      ],
      "spread": false,
      "description": "Utf instance with upper-case string."
    },
    "params": []
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "toLocaleUpperCase",
    "memberof": "src/unicode/Utf.js~Utf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/unicode/Utf.js~Utf#toLocaleUpperCase",
    "access": "public",
    "description": "Creates Utf instance with string converted to upper-case according to any locale-specific case mappings.",
    "see": [
      "{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase}"
    ],
    "lineNumber": 750,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Utf} Utf Instance with upper-case string."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "name": "locale",
        "description": "The locale/s to be used to convert to upper case according to any locale-specific case mappings."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Utf"
      ],
      "spread": false,
      "description": "Utf Instance with upper-case string."
    }
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "toLowerCase",
    "memberof": "src/unicode/Utf.js~Utf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/unicode/Utf.js~Utf#toLowerCase",
    "access": "public",
    "description": "Creates Utf instance with string converted to lower-case.",
    "see": [
      "{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase}"
    ],
    "lineNumber": 762,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Utf} Utf instance with lower-case string."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Utf"
      ],
      "spread": false,
      "description": "Utf instance with lower-case string."
    },
    "params": []
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "toLocaleLowerCase",
    "memberof": "src/unicode/Utf.js~Utf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/unicode/Utf.js~Utf#toLocaleLowerCase",
    "access": "public",
    "description": "Creates Utf instance with string converted to lower-case according to any locale-specific case mappings.",
    "see": [
      "{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase}"
    ],
    "lineNumber": 775,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Utf} Utf instance with lower-case string."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "name": "locale",
        "description": "The locale/s to be used to convert to upper case according to any locale-specific case mappings."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Utf"
      ],
      "spread": false,
      "description": "Utf instance with lower-case string."
    }
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/unicode/Utf.js~Utf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/unicode/Utf.js~Utf#toJSON",
    "access": "public",
    "description": "Returns the JSON representation.",
    "lineNumber": 786,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} JSON representation of Utf instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "JSON representation of Utf instance."
    },
    "params": []
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "toArray",
    "memberof": "src/unicode/Utf.js~Utf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/unicode/Utf.js~Utf#toArray",
    "access": "public",
    "description": "Returns the Array representation of Utf instance.",
    "lineNumber": 795,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string[]} Array representation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "Array representation."
    },
    "params": []
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "toString",
    "memberof": "src/unicode/Utf.js~Utf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/unicode/Utf.js~Utf#toString",
    "access": "public",
    "description": "Returns the String representation of Uft instance.",
    "lineNumber": 804,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} String representation of Utf intance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "String representation of Utf intance."
    },
    "params": []
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "valueOf",
    "memberof": "src/unicode/Utf.js~Utf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/unicode/Utf.js~Utf#valueOf",
    "access": "public",
    "description": "Returns the primitive value of this instance which is a string.",
    "lineNumber": 813,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} String primitive value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "String primitive value."
    },
    "params": []
  },
  {
    "__docId__": 217,
    "kind": "variable",
    "name": "EMPTY_UNICODE",
    "memberof": "src/unicode/Utf.js",
    "static": true,
    "longname": "src/unicode/Utf.js~EMPTY_UNICODE",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/unicode/Utf.js",
    "importStyle": "{EMPTY_UNICODE}",
    "description": null,
    "lineNumber": 818,
    "undocument": true,
    "type": {
      "types": [
        "src/unicode/Utf.js~Utf"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 218,
    "kind": "file",
    "name": "src/unicode/constants.js",
    "content": "export const UNICODE_CODEPOINT_MATCH_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|./g;\n\nexport const CODE_POINTS_TO_UTF_ERROR = \"Invalid Code Points parameter.\";\n\nexport const CODE_POINT_TO_STRING_ERROR = \"Invalid Code Point item while generating [Utf].\";\n\nexport const INVALID_REPEAT_COUNT_ERROR = \"Invalid repeat [count] parameter.\";\n",
    "static": true,
    "longname": "/opt/app/source/src/unicode/constants.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 219,
    "kind": "variable",
    "name": "UNICODE_CODEPOINT_MATCH_REGEXP",
    "memberof": "src/unicode/constants.js",
    "static": true,
    "longname": "src/unicode/constants.js~UNICODE_CODEPOINT_MATCH_REGEXP",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/unicode/constants.js",
    "importStyle": "{UNICODE_CODEPOINT_MATCH_REGEXP}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 220,
    "kind": "variable",
    "name": "CODE_POINTS_TO_UTF_ERROR",
    "memberof": "src/unicode/constants.js",
    "static": true,
    "longname": "src/unicode/constants.js~CODE_POINTS_TO_UTF_ERROR",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/unicode/constants.js",
    "importStyle": "{CODE_POINTS_TO_UTF_ERROR}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 221,
    "kind": "variable",
    "name": "CODE_POINT_TO_STRING_ERROR",
    "memberof": "src/unicode/constants.js",
    "static": true,
    "longname": "src/unicode/constants.js~CODE_POINT_TO_STRING_ERROR",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/unicode/constants.js",
    "importStyle": "{CODE_POINT_TO_STRING_ERROR}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 222,
    "kind": "variable",
    "name": "INVALID_REPEAT_COUNT_ERROR",
    "memberof": "src/unicode/constants.js",
    "static": true,
    "longname": "src/unicode/constants.js~INVALID_REPEAT_COUNT_ERROR",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/unicode/constants.js",
    "importStyle": "{INVALID_REPEAT_COUNT_ERROR}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 223,
    "kind": "file",
    "name": "src/unicode/format.js",
    "content": "import {\n  stringify\n} from \"../string/type\";\n\nimport { array } from \"../native/type\";\n\nimport {\n  CODE_POINTS_TO_UTF_ERROR,\n  UNICODE_CODEPOINT_MATCH_REGEXP\n} from \"./constants\";\n\nimport { codePoint2string } from \"./service\";\n\nimport {\n  Utf,\n  EMPTY_UNICODE\n} from \"./Utf\";\n\n/**\n * Convert Scalar value to Unicode.\n *\n * @param {*} subject Scalar value to convert.\n * @param {*} [defaultValue=Utf] optional defaultValue to return if failed.\n * @returns {Utf|*} Unicode string when successful, or [defaultValue] parameter is returned if failed.\n */\nexport function unicodify(subject, defaultValue = EMPTY_UNICODE) {\n  const stringified = stringify(subject, null);\n\n  return stringified === null ? defaultValue : new Utf(stringified);\n}\n\n/**\n * Create Utf based on Array of code points parameter.\n * Error will be thrown if parameter is invalid.\n *\n * @param {number[]} codes Array of code points.\n * @returns {Utf} Utf instance.\n */\nexport function codepoints2Utf(codes) {\n  if (!array(codes)) {\n    throw new Error(CODE_POINTS_TO_UTF_ERROR);\n  }\n\n  return new Utf(\n    codePoint2string(...codes)\n  );\n}\n\n/**\n * Safely counts number of Utf characters.\n *\n * @param {string|Utf} subject String or Utf to count.\n * @returns {number} returns number of resolved Utf characters. or zero (0)\n */\nexport function unicodeCount(subject) {\n  let string = null;\n\n  if (subject instanceof Utf) {\n    return subject.length;\n  }\n\n  string = stringify(subject);\n  if (string) {\n    return string.replace(UNICODE_CODEPOINT_MATCH_REGEXP, \"-\").length;\n  }\n\n  return 0;\n}\n",
    "static": true,
    "longname": "/opt/app/source/src/unicode/format.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 224,
    "kind": "function",
    "name": "unicodify",
    "memberof": "src/unicode/format.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/unicode/format.js~unicodify",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/unicode/format.js",
    "importStyle": "{unicodify}",
    "description": "Convert Scalar value to Unicode.",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Utf|*} Unicode string when successful, or [defaultValue] parameter is returned if failed."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "Scalar value to convert."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Utf",
        "defaultRaw": "Utf",
        "name": "defaultValue",
        "description": "optional defaultValue to return if failed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Utf",
        "*"
      ],
      "spread": false,
      "description": "Unicode string when successful, or [defaultValue] parameter is returned if failed."
    }
  },
  {
    "__docId__": 225,
    "kind": "function",
    "name": "codepoints2Utf",
    "memberof": "src/unicode/format.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/unicode/format.js~codepoints2Utf",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/unicode/format.js",
    "importStyle": "{codepoints2Utf}",
    "description": "Create Utf based on Array of code points parameter.\nError will be thrown if parameter is invalid.",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Utf} Utf instance."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "codes",
        "description": "Array of code points."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Utf"
      ],
      "spread": false,
      "description": "Utf instance."
    }
  },
  {
    "__docId__": 226,
    "kind": "function",
    "name": "unicodeCount",
    "memberof": "src/unicode/format.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/unicode/format.js~unicodeCount",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/unicode/format.js",
    "importStyle": "{unicodeCount}",
    "description": "Safely counts number of Utf characters.",
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} returns number of resolved Utf characters. or zero (0)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Utf"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "String or Utf to count."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "returns number of resolved Utf characters. or zero (0)"
    }
  },
  {
    "__docId__": 227,
    "kind": "file",
    "name": "src/unicode/index.js",
    "content": "export {\n  Utf\n} from \"./Utf\";\n\nexport {\n  eachUnicode,\n  string2unicodes,\n  string2codePoints,\n  codePoint2string\n} from \"./service\";\n\nexport {\n  unicodify,\n  unicodeCount,\n  codepoints2Utf\n} from \"./format\";\n",
    "static": true,
    "longname": "/opt/app/source/src/unicode/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 228,
    "kind": "file",
    "name": "src/unicode/service.js",
    "content": "import { method } from \"../native/type\";\n\nimport { IS_FINITE } from \"../native/number\";\n\nimport { EMPTY_STRING } from \"../native/constants\";\n\nimport {\n  STRING_FROM_CHARCODE\n} from \"../native/string\";\n\nimport { stringify } from \"../string/type\";\n\nimport {\n  UNICODE_CODEPOINT_MATCH_REGEXP\n} from \"./constants\";\n\n/**\n * Splits string into collection of Unicode characters.\n *\n * @param {string} subject String to split.\n * @returns {string[]} list of unicode characters.\n */\nexport function string2unicodes(subject) {\n  const string = stringify(subject);\n  const found = [];\n  let length = 0;\n\n  if (string) {\n    string.replace(\n      UNICODE_CODEPOINT_MATCH_REGEXP,\n      (char) => {\n        found[length++] = char;\n      }\n    );\n  }\n\n  return found;\n}\n\n/**\n * Splits string into collection of Unicode code points.\n *\n * @param {string} subject String to split.\n * @returns {number[]} list of codePoints.\n */\nexport function string2codePoints(subject) {\n  const string = stringify(subject);\n  const found = [];\n  let length = 0;\n\n  if (string) {\n    string.replace(\n      UNICODE_CODEPOINT_MATCH_REGEXP,\n      (char) => {\n        found[length++] = char.length === 1 ? char.charCodeAt(0)\n          : (char.charCodeAt(0) - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000;\n      }\n    );\n  }\n\n  return found;\n}\n\n/**\n * The callback used on each Unicode codePoint found.\n *\n * @callback eachCodePointCallback\n * @param {number} codePoint Unicode codePoint.\n * @param {string} chars string representation of codePoint.\n * @param {number} index Unicode character zero based index position.\n */\n\n/**\n * Iterates Unicode codePoints of string that executes callback on each codePoint found.\n *\n * @param {string} subject string to iterate.\n * @param {eachCodePointCallback} callback The callback to execute on each codePoint.\n * @returns {number} number of codePoints found\n */\nexport function eachUnicode(subject, callback) {\n  let char = null;\n  let c = 0;\n  let length = 0;\n  let foundLength = 0;\n  let string = null;\n\n  if (!method(callback)) {\n    return length;\n  }\n\n  string = string2unicodes(subject);\n  length = foundLength = string.length;\n\n  for (; length--; c++) {\n    char = string[c];\n    callback(\n      char.length === 1 ? char.charCodeAt(0)\n        : (char.charCodeAt(0) - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000,\n      char,\n      c\n    );\n  }\n\n  return foundLength;\n}\n\n/**\n * Creates string with given list of codePoints.\n *\n * @param {...number[]} codes codePoint to convert to string.\n * @returns {string} the string created based from codePoints list.\n */\nexport function codePoint2string(...codes) {\n  const fromCharCode = STRING_FROM_CHARCODE;\n  const finite = IS_FINITE;\n  const empty = EMPTY_STRING;\n  const found = [];\n  let foundLength = 0;\n  let c = 0;\n  let length = codes.length;\n  let value = null;\n  let code = null;\n\n  if (!length) {\n    return empty;\n  }\n\n  for (; length--; c++) {\n    code = codes[c];\n    value = 1 * code;\n\n    if (!finite(value) || value < 0 || value > 0x10FFFF) {\n      console.warn(RangeError(`Invalid code point: ${code}`));\n      return empty;\n    }\n\n    if (value > 0xFFFF) {\n      value -= 0x10000;\n      found[foundLength++] = fromCharCode(\n        (value >> 10) + 0xD800,\n        (value % 0x400) + 0xDC00\n      );\n    }\n    else {\n      found[foundLength++] = fromCharCode(value);\n    }\n  }\n\n  return found.join(empty);\n}\n",
    "static": true,
    "longname": "/opt/app/source/src/unicode/service.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 229,
    "kind": "function",
    "name": "string2unicodes",
    "memberof": "src/unicode/service.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/unicode/service.js~string2unicodes",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/unicode/service.js",
    "importStyle": "{string2unicodes}",
    "description": "Splits string into collection of Unicode characters.",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string[]} list of unicode characters."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "String to split."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "list of unicode characters."
    }
  },
  {
    "__docId__": 230,
    "kind": "function",
    "name": "string2codePoints",
    "memberof": "src/unicode/service.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/unicode/service.js~string2codePoints",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/unicode/service.js",
    "importStyle": "{string2codePoints}",
    "description": "Splits string into collection of Unicode code points.",
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number[]} list of codePoints."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "String to split."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": "list of codePoints."
    }
  },
  {
    "__docId__": 231,
    "kind": "function",
    "name": "eachUnicode",
    "memberof": "src/unicode/service.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/unicode/service.js~eachUnicode",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/unicode/service.js",
    "importStyle": "{eachUnicode}",
    "description": "Iterates Unicode codePoints of string that executes callback on each codePoint found.",
    "lineNumber": 80,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} number of codePoints found"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "string to iterate."
      },
      {
        "nullable": null,
        "types": [
          "eachCodePointCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback to execute on each codePoint."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "number of codePoints found"
    }
  },
  {
    "__docId__": 232,
    "kind": "function",
    "name": "codePoint2string",
    "memberof": "src/unicode/service.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/unicode/service.js~codePoint2string",
    "access": "public",
    "export": true,
    "importPath": "@dikotech/basic/src/unicode/service.js",
    "importStyle": "{codePoint2string}",
    "description": "Creates string with given list of codePoints.",
    "lineNumber": 113,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} the string created based from codePoints list."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "...number[]"
        ],
        "spread": true,
        "optional": false,
        "name": "codes",
        "description": "codePoint to convert to string."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the string created based from codePoints list."
    }
  },
  {
    "kind": "index",
    "content": "# @dikotech/basic",
    "longname": "/opt/app/source/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@dikotech/basic\",\n  \"version\": \"0.0.1\",\n  \"description\": \"Basic Javascript helpers\",\n  \"main\": \"cjs/index.js\",\n  \"module\": \"esm/index.js\",\n  \"scripts\": {\n    \"test:rollup\": \"rollup --config rollup.config.test.js\",\n    \"test:mocha\": \"mocha test/mocha-feed.js\",\n    \"pretest\": \"clear\",\n    \"test\": \"run-s build:parser test:rollup test:mocha\",\n    \"build:parser\": \"node lib/slr/generate-slr-states src/json/grammar.json src/json/parse-states.json\",\n    \"build:source\": \"rollup --config\",\n    \"build\": \"run-s build:parser build:source\",\n    \"prepare\": \"run-s build\",\n    \"lint\": \"eslint 'src/**/*.js'\",\n    \"tdd\": \"nodemon --watch src --exec 'npm run test'\",\n    \"jsdoc:build\": \"jsdoc -c jsdoc.json src\",\n    \"doc:build\": \"esdoc -c esdoc.json\",\n    \"docdoc:build\": \"documentation build src/** -f html -o docs\",\n    \"doc\": \"run-s clean:doc doc:build\",\n    \"doc-dev:build\": \"nodemon -V --watch src --watch esdoc.json --ignore 'src/**/*.json' --watch README.md --watch manual --ext js,md,json --exec 'npm run doc:build'\",\n    \"doc-dev:serve\": \"browser-sync start --config browsersync.doc.js\",\n    \"predoc-dev\": \"npm run clean:doc\",\n    \"doc-dev\": \"run-p doc-dev:build doc-dev:serve\",\n    \"clean:doc\": \"del 'docs/*'\",\n    \"clean:output\": \"del umd system cjs esm 'test'\",\n    \"clean\": \"run-p clean:doc clean:output\"\n  },\n  \"files\": [\n    \"cjs/*\",\n    \"esm/*\",\n    \"umd/*\",\n    \"system/*\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/diko316/dikotech-basic.git\"\n  },\n  \"keywords\": [\n    \"NodeJS\",\n    \"core\",\n    \"basic\",\n    \"Javascript\"\n  ],\n  \"author\": \"Diko Tech Slave\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/diko316/dikotech-basic/issues\"\n  },\n  \"homepage\": \"https://github.com/diko316/dikotech-basic#readme\",\n  \"devDependencies\": {\n    \"@rollup/plugin-buble\": \"^0.21.1\",\n    \"@rollup/plugin-commonjs\": \"^11.0.2\",\n    \"@rollup/plugin-json\": \"^4.0.2\",\n    \"@rollup/plugin-multi-entry\": \"^3.0.0\",\n    \"@rollup/plugin-node-resolve\": \"^7.1.1\",\n    \"better-docs\": \"^1.4.7\",\n    \"browser-sync\": \"^2.26.7\",\n    \"chai\": \"^4.2.0\",\n    \"clear-cli\": \"^1.0.1\",\n    \"del-cli\": \"^3.0.0\",\n    \"documentation\": \"^12.1.4\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^6.8.0\",\n    \"eslint-config-standard\": \"^14.1.0\",\n    \"eslint-config-strict\": \"^14.0.1\",\n    \"eslint-plugin-import\": \"^2.20.1\",\n    \"eslint-plugin-jsdoc\": \"^22.0.1\",\n    \"eslint-plugin-node\": \"^11.0.0\",\n    \"eslint-plugin-promise\": \"^4.2.1\",\n    \"eslint-plugin-standard\": \"^4.0.1\",\n    \"ink-docstrap\": \"^1.3.2\",\n    \"jsdoc\": \"^3.6.3\",\n    \"jsdoc-babel\": \"^0.5.0\",\n    \"mocha\": \"^7.1.0\",\n    \"nodemon\": \"^2.0.2\",\n    \"npm-run-all\": \"^4.1.5\",\n    \"rollup\": \"^2.0.6\",\n    \"rollup-plugin-delete\": \"^1.2.0\",\n    \"rollup-plugin-eslint\": \"^7.0.0\",\n    \"rollup-plugin-terser\": \"^5.3.0\",\n    \"unexpected\": \"^11.13.0\"\n  }\n}\n",
    "longname": "/opt/app/source/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": true,
    "content": "# @dikotech/basic",
    "longname": "/opt/app/source/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualAsset",
    "longname": "/opt/app/source/manual",
    "name": "./manual",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/opt/app/source/README.md",
    "name": "./README.md",
    "content": "# @dikotech/basic",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/opt/app/source/manual/json/query.md",
    "name": "./manual/json/query.md",
    "content": "# JSON Query\n\n## Usage\n\n### Importing `query` function from @dikotech/basic\n\nCommonJS\n\n```js\nconst query = require(\"@dikotech/basic\").query;\n```\n\nECMAScript module\n\n```js\nimport { query } from \"@dikotech/basic\";\n```\n### Simple Query\n\n```js\n// returns 9\nquery(\n  \"(1 + 2) * 3\"\n);\n\n// returns false\nquery(\n  \"5 > 6\"\n);\n\n// returns true\nquery(\n  \"5 <= 6\"\n);\n```\n\n### Select/Extract JSON data\n\n**With sample JSON**\n\n```json\n{\n  \"message\": \"Ok\",\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"name1\",\n      \"language\": [\n        \"en\",\n        \"fr\",\n        1,\n        \"de\"\n      ]\n    },\n    {\n      \"id\": 2,\n      \"name\": \"name2\"\n    }\n  ]\n}\n```\n\n#### Simple Extract data\n\n```js\n// returns 1\nquery(\n  \"data[0].id\",\n  object\n);\n```\n\n#### Extract and Compose\n\n**Composing array/list**\n\n```js\n// returns [ \"en\", \"fr\", \"de\" ]\nquery(\n  `\n  [\n    data[0].language[0],\n    data[0].language[1],\n    data[0].language[3]\n  ]\n  `,\n  object\n);\n```\n\n**Composing object**\n\n```js\n//  returns { \"found\": 1, \"nextName\": \"name1\" }\nquery(\n  `\n  {\n    found: data[0].id,\n    nextName: data[1].name\n  }\n  `,\n  object\n);\n```\n\n### Manipulate JSON data\n\n**With sample JSON**\n\n```json\n{\n  \"message\": \"Ok\",\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"name1\",\n      \"language\": [\n        \"en\",\n        \"fr\"\n      ]\n    },\n    {\n      \"id\": 2,\n      \"name\": \"name2\"\n    }\n  ]\n}\n```\n\n#### Set value\n\n**Simple set value**\n\n```js\n// data[0] will now contain { id: 42, name: \"name1\", language: [\"en\", \"fr\"]}\n// then, returns 42\nquery(\n  \"data[0].id = 42\",\n  object\n);\n```\n\n**Multiple set value**\n\n```js\n// data[0] will now contain { id: 42, name: \"name1\", language: [\"en\", \"fr\"]}\n// data[1] will now contain { id: 2, name: \"updated name\", language: [\"en\"]}\n// then, returns [42, \"updated name\", \"en\" ]\nquery(\n  `\n  [\n    data[0].id = ?,\n    data[1].name = ?,\n    data[1].language[] = ?\n  ]\n  `,\n  object,\n  [\n    42,\n    \"updated name\",\n    \"en\"\n  ]\n);\n\n// data[0] will now contain { id: 42, name: \"name1\", language: [\"en\", \"fr\"]}\n// data[1] will now contain { id: 2, name: \"updated name\", language: [\"en\"]}\n// then, returns { \"updatedId\": 42, \"updatedName\": \"updated name\", \"updatedLanguage\": \"en\" }\nquery(\n  `\n  {\n    updatedId: data[0].id = ?,\n    updatedName: data[1].name = ?,\n    updatedLanguage: data[1].language[] = ?\n  }\n  `,\n  object,\n  [\n    42,\n    \"updated name\",\n    \"en\"\n  ]\n);\n\n// creates new item in \"data\" array indexed by \"2\".\n// data[2] will now contain { id: 42, name: \"name1\", language: [\"en\"]}\n// then, returns { \"updatedId\": 42, \"updatedName\": \"updated name\", \"updatedLanguage\": \"en\" }\nquery(\n  `\n  {\n    updatedId: data[2].id = ?,\n    updatedName: data[2].name = ?,\n    updatedLanguage: data[2].language[] = ?\n  }\n  `,\n  object,\n  [\n    42,\n    \"updated name\",\n    \"en\"\n  ]\n);\n```\n\n#### Unset value\n\n**Simple remove property**\n```js\n\n// removes \"message\" property.\n// returns last value \"Ok\".\nquery(\n  \"delete message\",\n  object\n);\n\n// removes \"message\" property.\n//  then, removes \"name\" property in data[0].\n//  then, removes \"language\" property in data[0].\n//  then, pops \"0\" index in data[0].language array.\n// returns old values [ \"Ok\", \"name1\", \"en\" ].\nquery(\n  `\n  [\n    delete message,\n    delete data[0].name,\n    delete data[0].language,\n    delete data[0]\n  ]\n  `,\n  object\n);\n```\n\n## Query Language\n\nSupported Lexical Structures.\n\n### Lexical Structure\n\n```\n#####################################\n# Reference declarations (optional)\n#####################################\n\n[`identifier` from `expression`;]\n  ...\n  [`identifier` from `expression`;]\n\n\n#####################################\n# Main expression (required)\n#####################################\n\n# return result of `expression`\n`expression`\n\n  # or, return composed array\n  |\n    `[`\n      `expression`\n      [, `expression`]\n      [, `expression`]\n    `]`\n\n  # or, return composed object\n  |\n    `{`\n      `identifier`: `expression`\n      [, `identifier`: `expression`]\n      [, `identifier`: `expression`]\n    `}`\n\n\n```\n\n### References\n\n**Using references**\n\n```\n// reference declaration\n\nmyReference from data[1].value;\nfirstElement from data[0];\ncustomValue from ?;\n\n// using reference with @\n{\n  count: @myReference.length,\n  first: @firstElement,\n  value: @customValue\n}\n```\n\n### Scalar and Literals\n\nScalars are literally declared as seen in the examples.\n\n\nType | Example | Description\n--- | --- | ---\nInteger | `10`<br><br>`-2`<br><br>`+500` | Whole number.\nFloat | `.5`<br><br>`1.5`<br><br>`-0.1` | Number with precision\nPercent | `-1%`<br><br>`210%` | Float multiplied by .01\nString | `\"double quote\"`<br><br>`'single quote'`<br><br>`'\\n escaped next line'` | Enclosed in double quote and single quote\n\n\n### Array/List\n\nLists are internally Javascript Array instance.\n\nIt can be composed by enclosing items with brackets `[]` like: `[1, 2, \"last item\"]`.\n\nResult Type | Example | Description\n--- | --- | ---\nArray | `[1,2,3]`<br><br>`[`<br>&nbsp;&nbsp;&nbsp;&nbsp;`\"diko\",`<br>&nbsp;&nbsp;&nbsp;&nbsp;`3,`<br>&nbsp;&nbsp;&nbsp;&nbsp;`@myValue`<br>`]` | Zero-based indexed list of values where first item index is 0, and nth for next consecutive items.\n\n\n### Object\n\nObjects are internal Javascript Object instance.\n\nIt can be composed by enclosing properties with braces `{}`.\n\nProperties are named with `identifiers` followed by colon `:`, then an `expression` representing value of the property.\n\n```js\n{\n  first: 1,\n  seconds: 2,\n  last: \"last item\"\n}\n```\n\n\nResult Type | Example | Description\n--- | --- | ---\nObject | { first: 1, seconds: 2 , third: 3 }<br><br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;name: \"diko\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\"count\": 3,<br>&nbsp;&nbsp;&nbsp;&nbsp;value: @myValue<br>} | Struct data containing properties defined using **:** operator and **identifier** as property name.\n\n### Variables\n\n\nResult Type | Operator | Example | Description\n--- | --- | --- | ---\nMixed | **`?`** | data[**?**]<br><br>data[0].id = **?** | Question mark **?** contains any value defined outside the query.<br>Value in **?** contains value listed in **variables** Array argument when calling `query(myquery, targetobject, `**variables**`)` function in order they appear in the query code.<br><br>For example, the first question mark will contain **\"my value\"** string if function is executed like this `query(\"data.?\", target, [`**\"my value\"**`, 1])`\nMixed | **`@`** | myReference *from* data[1];<br>value *from* **@myReference**.value;<br>another *from* ?;<br><br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;name: **@myReference**.name,<br>&nbsp;&nbsp;&nbsp;&nbsp;value: 1 + **@value**,<br>&nbsp;&nbsp;&nbsp;&nbsp;scope: **@**,<br>&nbsp;&nbsp;&nbsp;&nbsp;custom: **@1**<br>} | Uses value referenced from **from** declaration. <br><br>**@** can also be used to reference root object if not followed by identifier.<br><br>**@** can represent **?** variable when it's followed by numeric identifier such as **@1**, or **@3**.\n\n\n### Arithmetic\n\n Result Type | Operator | Example | Description\n--- | --- | --- | ---\nNumber or,<br>String | **`+`** | 1 **`+`** 2 | Addition.<br>But, result may be a **concatenated string** if one or all of the operands is a **string**.\nNumber | **`-`** | 1 **`-`** 2 | Subtraction.\nNumber | **`*`** | 1 **`*`** 2 | Multiplication.\nNumber | **`/`** | 1 **`/`** 2 | Division.\nNumber | **`%`** | 1 **`%`** 2 | Modulo Division. Resturns remainder of division operation\n\n### Conditional\n\n Result Type | Operator | Example | Description\n--- | --- | --- | ---\nBoolean | **`==`** | 1 **`==`** 2 | Modulo Division.\nBoolean | **`>`** | 1 **`>`** 2 | Addition.\nBoolean | **`>=`** | 1 **`>=`** 2 | Subtraction.\nBoolean | **`<`** | 1 **`<`** 2 | Multiplication.\nBoolean | **`<=`** | 1 **`<=`** 2 | Division.\n\n### Assignment\n\nResult Type | Operator | Example | Description\n--- | --- | --- | ---\nMixed | **`=`** | data[0].value **`=`** \"value\" | Assigns **\"value\"** to **data[0].value** expression. <br>Take note that if zero \"0\" don't exist, zero index will be created with empty object.\n\n### Object Query\n\nResult Type | Operator | Example | Description\n--- | --- | --- | ---\nMixed | **`.`** | data **`.`** propertyName<br>data **`.`** \"propertyName\" **`.`** target = ? | **Extract mode:**<br>Retrieves property of Object.<br><br>**Assign mode:**<br>Assign/Populate property value of the Object.\nMixed | **`[]`** | data **`[1]`**<br><br>data **`[propertyName]`** = ?<br><br>data **`[1..10, 20]`**<br><br>data **`[]`** is ? | **Extract mode:**<br>Retrieves property of an object or item of an Array list if there is only one value or identifier inside **`[]`**.<br><br>It can also act as object property or list index filter if **`[]`** contains none (e.g. **`[]`**), or two or more values (e.g. **`[1, 5, name]`**), or number range (e.g. **`[10..25]`**).<br>The result of list index or object property filter with **`[]`** operator end up as list array.<br><br>**Assign mode:**<br>Assign/populate list item or object property value. May also do multiple assignment of values when **`[]`** operator results in object property or list index filter.\nMixed | **`:`** | propertyName **:** data[0] | **Compose mode:**<br>Assign property value of an object with the given identifier.",
    "static": true,
    "access": "public"
  }
]